{"ast":null,"code":"class Piece {\n  constructor(size) {\n    this.size = size;\n    this.positions = [];\n    this.hits = [];\n    this.alive = true;\n    this.rotation = 0;\n  }\n\n  rotatePiece(spaces) {\n    let rot = this.rotation;\n    let finPos = [];\n    let anchorPoint = rot === 0 || rot === 270 ? Math.min(...this.positions) : Math.max(...this.positions);\n    let anchorRemainder = anchorPoint > 9 ? anchorPoint - anchorPoint % 10 : 0;\n    let nuRot = false;\n    console.log(anchorRemainder);\n\n    for (let i = 0; i < 4; i++) {\n      rot += 90;\n      rot = rot < 360 ? rot : 0;\n      let canRotate = true;\n      finPos = [anchorPoint];\n\n      for (let j = 1; j < this.size; j++) {\n        if (rot === 0) {\n          let dex = anchorPoint + 10 * j;\n          finPos[j] = dex;\n\n          if (dex > 99) {\n            canRotate = false;\n            break;\n          }\n        } else if (rot === 90) {\n          let dex = anchorPoint - j;\n          let rem = dex > 9 ? dex - dex % 10 : 0;\n          finPos[j] = dex;\n          console.log(dex, rem);\n\n          if (dex < 0 || rem != anchorRemainder) {\n            canRotate = false;\n            break;\n          }\n        } else if (rot === 180) {\n          let dex = anchorPoint - 10 * j;\n          finPos[j] = dex;\n\n          if (dex < 0) {\n            canRotate = false;\n            break;\n          }\n        } else if (rot === 270) {\n          let dex = anchorPoint + j;\n          let rem = dex > 9 ? dex - dex % 10 : 0;\n          finPos[j] = dex;\n          console.log(dex, rem);\n\n          if (dex > 99 || rem != anchorRemainder) {\n            canRotate = false;\n            break;\n          }\n        }\n      }\n\n      if (canRotate) {\n        nuRot = true;\n\n        if (nuRot) {\n          break;\n        }\n      }\n    }\n\n    if (nuRot) {\n      this.positions = finPos;\n      this.rotation = rot;\n    }\n  }\n\n}\n\nclass PlayerPieces {\n  constructor() {\n    this.gamePieces = [new Piece(2), new Piece(3), new Piece(3), new Piece(4), new Piece(5)];\n    this.squares = Array(100).fill(0);\n  }\n\n  canPlaceGamepiece(arr) {\n    let canPlace = true;\n\n    for (let i = 0; i < arr.length; i++) {\n      if (this.squares.includes(arr[i])) {\n        canPlace = false;\n        break;\n      }\n    }\n\n    return canPlace;\n  }\n\n  addPiece(spaces, dex) {\n    for (let i = 0; i < spaces.length; i++) {\n      this.squares[spaces[i]] = 1;\n    }\n\n    this.gamePieces[dex].positions = spaces;\n  }\n\n  rotatePiece(dex) {\n    let initSpaces = this.gamePieces[dex].positions;\n    let occupiedSpaces = [];\n\n    for (let i = 0; i < this.gamePieces.length; i++) {\n      if (i != dex) {\n        for (let j = 0; j < this.gamePieces[i].positions.length; j++) {\n          occupiedSpaces.push(this.gamePieces[i].positions[j]);\n        }\n      }\n    }\n\n    this.gamePieces[dex].rotatePiece(occupiedSpaces);\n    let nuSpaces = this.gamePieces[dex].positions;\n\n    for (let i = 0; i < initSpaces.length; i++) {\n      this.squares[initSpaces[i]] = 0;\n      this.squares[nuSpaces[i]] = 1;\n    }\n  }\n\n}\n\nlet playerPieces = new PlayerPieces();\nexport default playerPieces;","map":{"version":3,"sources":["/Users/ryzm/Desktop/Battleship/src/playerPieces.js"],"names":["Piece","constructor","size","positions","hits","alive","rotation","rotatePiece","spaces","rot","finPos","anchorPoint","Math","min","max","anchorRemainder","nuRot","console","log","i","canRotate","j","dex","rem","PlayerPieces","gamePieces","squares","Array","fill","canPlaceGamepiece","arr","canPlace","length","includes","addPiece","initSpaces","occupiedSpaces","push","nuSpaces","playerPieces"],"mappings":"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","sourcesContent":["class Piece{\n  constructor(size){\n    this.size = size;\n    this.positions = [];\n    this.hits = [];\n    this.alive = true;\n    this.rotation = 0;\n  }\n\n  rotatePiece(spaces){\n    let rot = this.rotation;\n    let finPos = [];\n    let anchorPoint = rot === 0 || rot === 270 ? Math.min(...this.positions) : Math.max(...this.positions);\n    let anchorRemainder = anchorPoint > 9 ? anchorPoint - anchorPoint % 10 : 0;\n    let nuRot = false;\n    console.log(anchorRemainder);\n    for(let i = 0; i < 4; i++){\n      rot += 90;\n      rot = rot < 360 ? rot : 0;\n      let canRotate = true;\n      finPos = [anchorPoint];\n      for(let j = 1; j < this.size; j++){\n        if(rot === 0){\n          let dex = anchorPoint + 10 * j\n          finPos[j] = dex\n          if(dex > 99){\n            canRotate = false;\n            break;\n          }\n        }\n        else if(rot === 90){\n          let dex = anchorPoint - j\n          let rem = dex > 9 ? dex - dex % 10 : 0;\n          finPos[j] = dex\n          console.log(dex, rem);\n          if(dex < 0 || rem != anchorRemainder){\n            canRotate = false;\n            break;\n          }\n        }\n        else if(rot === 180){\n          let dex = anchorPoint - 10 * j\n          finPos[j] = dex\n          if(dex < 0){\n            canRotate = false;\n            break;\n          }\n        }\n        else if(rot === 270){\n          let dex = anchorPoint + j\n          let rem = dex > 9 ? dex - dex % 10 : 0;\n          finPos[j] = dex\n          console.log(dex, rem);\n          if(dex > 99 || rem != anchorRemainder){\n            canRotate = false;\n            break;\n          }\n        }\n      }\n      if(canRotate){\n        nuRot = true;\n        if(nuRot){\n          break;\n        }\n      }\n    }\n    if(nuRot){\n      this.positions = finPos;\n      this.rotation = rot;\n    }\n  }\n}\n\nclass PlayerPieces{\n  constructor(){\n    this.gamePieces = [new Piece(2), new Piece(3), new Piece(3), new Piece(4), new Piece(5)];\n    this.squares = Array(100).fill(0);\n  }\n  canPlaceGamepiece(arr){\n    let canPlace = true;\n    for(let i = 0; i < arr.length; i++){\n      if(this.squares.includes(arr[i])){\n        canPlace = false;\n        break;\n      }\n    }\n    return canPlace;\n  }\n\n  addPiece(spaces, dex){\n    for(let i = 0; i < spaces.length; i++){\n      this.squares[spaces[i]] = 1;\n    }\n    this.gamePieces[dex].positions = spaces\n  }\n\n  rotatePiece(dex){\n    let initSpaces = this.gamePieces[dex].positions;\n    let occupiedSpaces = [];\n    for(let i = 0; i < this.gamePieces.length; i++){\n      if(i != dex){\n        for(let j = 0; j < this.gamePieces[i].positions.length; j++){\n          occupiedSpaces.push(this.gamePieces[i].positions[j]);\n        }\n      }\n    }\n    this.gamePieces[dex].rotatePiece(occupiedSpaces);\n    let nuSpaces = this.gamePieces[dex].positions;\n    for(let i = 0; i < initSpaces.length; i++){\n      this.squares[initSpaces[i]] = 0;\n      this.squares[nuSpaces[i]] = 1;\n    }\n  }\n}\n\nlet playerPieces = new PlayerPieces()\n\n\nexport default playerPieces;\n"]},"metadata":{},"sourceType":"module"}