{"ast":null,"code":"var _jsxFileName = \"/Users/ryzm/Desktop/Battleship/src/Board.js\";\nimport React, { Component } from 'react';\nimport Square from \"./Square.js\";\nimport winningConditions from './winningConditions.js';\nimport playerPieces1 from './playerPieces.js';\nimport playerPieces2 from './playerPieces.js';\nimport characters from \"./characters.js\";\nimport './App.css';\nimport Dropdown from './Dropdown.js';\nimport blank from \"./blank.png\";\nimport arya from \"./faces/arya.png\";\nimport bran from \"./faces/bran.png\";\nimport brienne from \"./faces/brienne.png\";\nimport cersei from \"./faces/cersei.png\";\nimport daenerys from \"./faces/daenerys.png\";\nimport davos from \"./faces/davos.png\";\nimport euron from \"./faces/euron.png\";\nimport greyWorm from \"./faces/greyWorm.png\";\nimport hound from \"./faces/hound.png\";\nimport jamie from \"./faces/jamie.png\";\nimport jonSnow from \"./faces/jonSnow.png\";\nimport jorah from \"./faces/jorah.png\";\nimport melisandre from \"./faces/melisandre.png\";\nimport missandei from \"./faces/missandei.png\";\nimport nightKing from \"./faces/nightKing.png\";\nimport samwell from \"./faces/samwell.png\";\nimport sansa from \"./faces/sansa.png\";\nimport theon from \"./faces/theon.png\";\nimport tyrion from \"./faces/tyrion.png\";\nimport varys from \"./faces/varys.png\";\nimport theme from \"./theme.mp3\";\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getPicture = character => {\n      switch (character) {\n        case \"Arya Stark\":\n          return arya;\n\n        case \"Bran Stark\":\n          return bran;\n\n        case \"Brienne of Tarth\":\n          return brienne;\n\n        case \"Cersei Lannister\":\n          return cersei;\n\n        case \"Daenerys Targaryean\":\n          return daenerys;\n\n        case \"Davos Seaworth\":\n          return davos;\n\n        case \"Euron Greyjoy\":\n          return euron;\n\n        case \"Grey Worm\":\n          return greyWorm;\n\n        case \"The Hound\":\n          return hound;\n\n        case \"Jamie Lannister\":\n          return jamie;\n\n        case \"Jon Snow\":\n          return jonSnow;\n\n        case \"Jorah Mormont\":\n          return jorah;\n\n        case \"Melisandre\":\n          return melisandre;\n\n        case \"Missandei\":\n          return missandei;\n\n        case \"Night King\":\n          return nightKing;\n\n        case \"Samwell Tarly\":\n          return samwell;\n\n        case \"Sansa Stark\":\n          return sansa;\n\n        case \"Theon Greyjoy\":\n          return theon;\n\n        case \"Tyrion Lannister\":\n          return tyrion;\n\n        case \"Varys\":\n          return varys;\n      }\n\n      return jonSnow;\n    };\n\n    this.checkIfWinner = () => {\n      let _this$state = this.state,\n          firstPlayer = _this$state.firstPlayer,\n          secondPlayer = _this$state.secondPlayer;\n      let firstWon = false;\n\n      for (let i = 0; i < winningConditions.length; i++) {\n        for (let j = 0; j < winningConditions[i].length; j++) {\n          if (firstPlayer.spaces.includes(winningConditions[i][j])) {\n            firstWon = true;\n          } else {\n            firstWon = false;\n            break;\n          }\n        }\n\n        if (firstWon) {\n          break;\n        }\n      }\n\n      if (firstWon) {\n        this.setState({\n          gameOver: true\n        });\n        firstPlayer[\"won\"] = true;\n        let nuWins = firstPlayer.wins + 1;\n        firstPlayer[\"wins\"] = nuWins;\n        this.setState({\n          firstPlayer\n        });\n        return;\n      }\n\n      let secondWon = false;\n\n      for (let i = 0; i < winningConditions.length; i++) {\n        for (let j = 0; j < winningConditions[i].length; j++) {\n          if (secondPlayer.spaces.includes(winningConditions[i][j])) {\n            secondWon = true;\n          } else {\n            secondWon = false;\n            break;\n          }\n        }\n\n        if (secondWon) {\n          break;\n        }\n      }\n\n      if (secondWon) {\n        this.setState({\n          gameOver: true\n        });\n        secondPlayer[\"won\"] = true;\n        let nuWins = secondPlayer.wins + 1;\n        secondPlayer[\"wins\"] = nuWins;\n        this.setState({\n          secondPlayer\n        });\n        return;\n      }\n\n      const squares = this.state.squares;\n      let endGame = true;\n\n      for (let i = 0; i < squares.length; i++) {\n        if (squares[i] === null) {\n          endGame = false;\n          break;\n        }\n      }\n\n      if (endGame) {\n        this.setState({\n          gameOver: true\n        });\n      }\n    };\n\n    this.handleClick = id => {\n      let _this$state2 = this.state,\n          squares = _this$state2.squares,\n          firstPlayerTurn = _this$state2.firstPlayerTurn,\n          firstPlayer = _this$state2.firstPlayer,\n          secondPlayer = _this$state2.secondPlayer,\n          gameOver = _this$state2.gameOver;\n\n      if (gameOver) {\n        return;\n      }\n\n      let possibleClick = false;\n      let s = squares;\n\n      for (let i = 0; i < s.length; i++) {\n        if (id === i) {\n          if (s[i] === null) {\n            possibleClick = true;\n            s[i] = firstPlayerTurn ? 1 : 2;\n\n            if (firstPlayerTurn) {\n              let spa = firstPlayer.spaces;\n              spa.push(i);\n              firstPlayer[\"spaces\"] = spa;\n              this.setState({\n                firstPlayer\n              });\n            } else {\n              let spa = secondPlayer.spaces;\n              spa.push(i);\n              secondPlayer[\"spaces\"] = spa;\n              this.setState({\n                secondPlayer\n              });\n            }\n          }\n\n          break;\n        }\n      }\n\n      if (possibleClick) {\n        this.setState({\n          squares: s\n        });\n        let nuTurn = !firstPlayerTurn;\n        this.setState({\n          firstPlayerTurn: nuTurn\n        });\n        this.checkIfWinner();\n      }\n    };\n\n    this.resetGame = () => {\n      let _this$state3 = this.state,\n          firstPlayer = _this$state3.firstPlayer,\n          secondPlayer = _this$state3.secondPlayer;\n      firstPlayer[\"spaces\"] = [];\n      firstPlayer[\"won\"] = false;\n      secondPlayer[\"spaces\"] = [];\n      secondPlayer[\"won\"] = false;\n      let s = Array(9).fill(null);\n      this.setState({\n        squares: s\n      });\n      this.setState({\n        firstPlayer\n      });\n      this.setState({\n        secondPlayer\n      });\n      this.setState({\n        firstPlayerTurn: true\n      });\n      this.setState({\n        gameOver: false\n      });\n    };\n\n    this.chooseCharacter = (isFirst, character) => {\n      let _this$state4 = this.state,\n          firstPlayer = _this$state4.firstPlayer,\n          secondPlayer = _this$state4.secondPlayer;\n\n      if (isFirst) {\n        firstPlayer[\"character\"] = character;\n        this.setState({\n          firstPlayer\n        });\n      } else {\n        secondPlayer[\"character\"] = character;\n        this.setState({\n          secondPlayer\n        });\n      }\n    };\n\n    this.placeShip = id => {\n      let firstPlayer = this.state.firstPlayer;\n      let piece = firstPlayer.pieces.gamePieces[firstPlayer.currentPiece];\n      let spaces = [];\n\n      for (let i = 0; i < piece.size; i++) {\n        let dex = id + 10 * i;\n\n        if (dex > 99) {\n          return;\n        }\n\n        spaces.push(dex);\n      }\n\n      let possiblePlace = firstPlayer.pieces.canPlaceGamepiece(spaces);\n\n      if (possiblePlace) {\n        for (let i = 0; i < spaces.length; i++) {\n          squares.push(spaces[i]);\n        }\n\n        this.setState({\n          placingPiece: true\n        });\n        piece.positions = spaces;\n      }\n    };\n\n    this.rotatePiece = () => {};\n\n    this.confirmPlace = () => {};\n\n    this.playMusic = () => {\n      const _this$state5 = this.state,\n            musicPlaying = _this$state5.musicPlaying,\n            audio = _this$state5.audio;\n      let isPlaying = musicPlaying;\n      isPlaying = !isPlaying;\n\n      if (isPlaying) {\n        audio.play();\n      } else {\n        audio.pause();\n      }\n\n      this.setState({\n        musicPlaying: isPlaying\n      });\n    };\n\n    this.state = {\n      squares: Array(100).fill(null),\n      firstPlayer: {\n        spaces: [],\n        hits: [],\n        misses: [],\n        pieces: playerPieces1,\n        won: false,\n        character: characters[0],\n        wins: 0,\n        currentPiece: 0\n      },\n      secondPlayer: {\n        spaces: [],\n        hits: [],\n        misses: [],\n        pieces: playerPieces2,\n        won: false,\n        character: characters[1],\n        wins: 0,\n        currentPiece: 0\n      },\n      placingPiece: false,\n      musicPlaying: false,\n      firstPlayerTurn: true,\n      gameOver: false,\n      audio: new Audio(theme),\n      gameStarted: false\n    };\n  }\n\n  componentDidMount() {\n    this.state.audio.play();\n    this.setState({\n      musicPlaying: true\n    });\n  }\n\n  render() {\n    let _this$state6 = this.state,\n        squares = _this$state6.squares,\n        firstPlayer = _this$state6.firstPlayer,\n        secondPlayer = _this$state6.secondPlayer,\n        gameOver = _this$state6.gameOver,\n        musicPlaying = _this$state6.musicPlaying;\n    let grid = squares.map((square, i) => {\n      return React.createElement(Square, {\n        key: i.toString(),\n        id: i,\n        firstPlayer: firstPlayer.character,\n        secondPlayer: secondPlayer.character,\n        val: squares[i],\n        handleClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      className: \"backgroundStuff\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"glow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, firstPlayer.won ? firstPlayer.character + \" Won\" : secondPlayer.won ? secondPlayer.character + \" Won\" : gameOver ? \"It's a Tie\" : \"Game Of Thrones\"), React.createElement(Dropdown, {\n      isFirst: true,\n      chooseCharacter: this.chooseCharacter,\n      currentCharacter: firstPlayer.character,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }), React.createElement(Dropdown, {\n      isFirst: false,\n      chooseCharacter: this.chooseCharacter,\n      currentCharacter: secondPlayer.character,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.resetGame,\n      className: \"resetButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, \"Reset\"), React.createElement(\"button\", {\n      onClick: this.playMusic,\n      className: \"resetButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, musicPlaying ? \"Stop\" : \"Play\"), this.state.placingPiece ? React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, \"Rotate\") : null, React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, grid), React.createElement(\"div\", {\n      className: \"characterGrid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"playerOne\",\n      src: this.getPicture(firstPlayer.character),\n      alt: blank,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"playerTwo\",\n      src: this.getPicture(secondPlayer.character),\n      alt: blank,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"nameGrid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, firstPlayer.character), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, secondPlayer.character)), React.createElement(\"div\", {\n      className: \"playerGrid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, \"Player One\"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, \"Player Two\")), React.createElement(\"div\", {\n      className: \"winsGrid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, firstPlayer.wins), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, secondPlayer.wins)));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/ryzm/Desktop/Battleship/src/Board.js"],"names":["React","Component","Square","winningConditions","playerPieces1","playerPieces2","characters","Dropdown","blank","arya","bran","brienne","cersei","daenerys","davos","euron","greyWorm","hound","jamie","jonSnow","jorah","melisandre","missandei","nightKing","samwell","sansa","theon","tyrion","varys","theme","Board","constructor","props","getPicture","character","checkIfWinner","state","firstPlayer","secondPlayer","firstWon","i","length","j","spaces","includes","setState","gameOver","nuWins","wins","secondWon","squares","endGame","handleClick","id","firstPlayerTurn","possibleClick","s","spa","push","nuTurn","resetGame","Array","fill","chooseCharacter","isFirst","placeShip","piece","pieces","gamePieces","currentPiece","size","dex","possiblePlace","canPlaceGamepiece","placingPiece","positions","rotatePiece","confirmPlace","playMusic","musicPlaying","audio","isPlaying","play","pause","hits","misses","won","Audio","gameStarted","componentDidMount","render","grid","map","square","toString"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Square from \"./Square.js\";\nimport winningConditions from './winningConditions.js';\nimport playerPieces1 from './playerPieces.js';\nimport playerPieces2 from './playerPieces.js';\nimport characters from \"./characters.js\";\nimport './App.css';\nimport Dropdown from './Dropdown.js';\nimport blank from \"./blank.png\";\nimport arya from \"./faces/arya.png\";\nimport bran from \"./faces/bran.png\";\nimport brienne from \"./faces/brienne.png\";\nimport cersei from \"./faces/cersei.png\";\nimport daenerys from \"./faces/daenerys.png\";\nimport davos from \"./faces/davos.png\";\nimport euron from \"./faces/euron.png\";\nimport greyWorm from \"./faces/greyWorm.png\";\nimport hound from \"./faces/hound.png\";\nimport jamie from \"./faces/jamie.png\";\nimport jonSnow from \"./faces/jonSnow.png\";\nimport jorah from \"./faces/jorah.png\";\nimport melisandre from \"./faces/melisandre.png\";\nimport missandei from \"./faces/missandei.png\";\nimport nightKing from \"./faces/nightKing.png\";\nimport samwell from \"./faces/samwell.png\";\nimport sansa from \"./faces/sansa.png\";\nimport theon from \"./faces/theon.png\";\nimport tyrion from \"./faces/tyrion.png\";\nimport varys from \"./faces/varys.png\";\nimport theme from \"./theme.mp3\";\n\nclass Board extends Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      squares: Array(100).fill(null),\n      firstPlayer : {\n        spaces: [],\n        hits: [],\n        misses: [],\n        pieces: playerPieces1,\n        won : false,\n        character: characters[0],\n        wins: 0,\n        currentPiece: 0\n      },\n      secondPlayer : {\n        spaces: [],\n        hits: [],\n        misses: [],\n        pieces: playerPieces2,\n        won : false,\n        character: characters[1],\n        wins: 0,\n        currentPiece: 0\n      },\n      placingPiece: false,\n      musicPlaying: false,\n      firstPlayerTurn : true,\n      gameOver: false,\n      audio : new Audio(theme),\n      gameStarted: false\n    }\n  }\n\n  getPicture = (character) => {\n    switch(character){\n      case \"Arya Stark\":\n        return arya;\n      case \"Bran Stark\":\n        return bran;\n      case \"Brienne of Tarth\":\n        return brienne;\n      case \"Cersei Lannister\":\n        return cersei;\n      case \"Daenerys Targaryean\":\n        return daenerys;\n      case \"Davos Seaworth\":\n        return davos;\n      case \"Euron Greyjoy\":\n        return euron;\n      case \"Grey Worm\":\n        return greyWorm;\n      case \"The Hound\":\n        return hound;\n      case \"Jamie Lannister\":\n        return jamie;\n      case \"Jon Snow\":\n        return jonSnow;\n      case \"Jorah Mormont\":\n        return jorah;\n      case \"Melisandre\":\n        return melisandre;\n      case \"Missandei\":\n        return missandei;\n      case \"Night King\":\n        return nightKing;\n      case \"Samwell Tarly\":\n        return samwell;\n      case \"Sansa Stark\":\n        return sansa;\n      case \"Theon Greyjoy\":\n        return theon;\n      case \"Tyrion Lannister\":\n        return tyrion;\n      case \"Varys\":\n        return varys;\n    }\n    return jonSnow;\n  }\n\n  checkIfWinner = () =>{\n    let { firstPlayer, secondPlayer} = this.state;\n    let firstWon = false;\n    for(let i = 0; i < winningConditions.length; i++){\n      for(let j = 0; j < winningConditions[i].length; j++){\n        if(firstPlayer.spaces.includes(winningConditions[i][j])){\n          firstWon = true;\n        }\n        else {\n          firstWon = false;\n          break;\n        }\n      }\n      if(firstWon){\n        break;\n      }\n    }\n    if(firstWon){\n      this.setState({gameOver: true});\n      firstPlayer[\"won\"] = true;\n      let nuWins = firstPlayer.wins + 1;\n      firstPlayer[\"wins\"] = nuWins;\n      this.setState({firstPlayer});\n      return;\n    }\n\n    let secondWon = false;\n    for(let i = 0; i < winningConditions.length; i++){\n      for(let j = 0; j < winningConditions[i].length; j++){\n        if(secondPlayer.spaces.includes(winningConditions[i][j])){\n          secondWon = true;\n        }\n        else {\n          secondWon = false;\n          break;\n        }\n      }\n      if(secondWon){\n        break;\n      }\n    }\n\n    if(secondWon){\n      this.setState({gameOver: true});\n      secondPlayer[\"won\"] = true\n      let nuWins = secondPlayer.wins + 1;\n      secondPlayer[\"wins\"] = nuWins;\n      this.setState({secondPlayer});\n      return;\n    }\n    const {squares} = this.state;\n    let endGame = true;\n    for(let i = 0; i < squares.length; i++){\n      if(squares[i] === null){\n        endGame = false;\n        break;\n      }\n    }\n    if(endGame){\n      this.setState({gameOver: true});\n    }\n  }\n\n  handleClick = (id) => {\n    let {squares, firstPlayerTurn, firstPlayer, secondPlayer, gameOver} = this.state;\n    if(gameOver){\n      return;\n    }\n    let possibleClick = false;\n    let s = squares;\n    for(let i = 0; i < s.length; i++){\n      if(id === i){\n        if(s[i] === null){\n          possibleClick = true;\n          s[i] = firstPlayerTurn ? 1 : 2;\n          if(firstPlayerTurn){\n            let spa = firstPlayer.spaces;\n            spa.push(i);\n            firstPlayer[\"spaces\"] = spa\n            this.setState({firstPlayer})\n          }\n          else {\n            let spa = secondPlayer.spaces;\n            spa.push(i);\n            secondPlayer[\"spaces\"] = spa\n            this.setState({secondPlayer})\n          }\n        }\n        break;\n      }\n    }\n    if(possibleClick){\n      this.setState({squares: s});\n      let nuTurn = !firstPlayerTurn;\n      this.setState({firstPlayerTurn : nuTurn});\n      this.checkIfWinner();\n    }\n  }\n\n  resetGame = () => {\n    let {firstPlayer, secondPlayer} = this.state;\n    firstPlayer[\"spaces\"] = [];\n    firstPlayer[\"won\"] = false;\n    secondPlayer[\"spaces\"] = [];\n    secondPlayer[\"won\"] = false;\n    let s = Array(9).fill(null);\n    this.setState({squares : s});\n    this.setState({firstPlayer});\n    this.setState({secondPlayer});\n    this.setState({firstPlayerTurn : true});\n    this.setState({gameOver : false});\n  }\n\n  chooseCharacter = (isFirst, character) =>{\n    let {firstPlayer,secondPlayer} = this.state\n    if(isFirst){\n      firstPlayer[\"character\"] = character;\n      this.setState({firstPlayer});\n    }\n    else{\n      secondPlayer[\"character\"] = character;\n      this.setState({secondPlayer});\n    }\n  }\n\n  placeShip = (id) => {\n    let {firstPlayer} = this.state;\n    let piece = firstPlayer.pieces.gamePieces[firstPlayer.currentPiece];\n    let spaces = [];\n    for(let i = 0; i < piece.size; i++){\n      let dex = id + 10 * i\n      if(dex > 99){\n        return;\n      }\n      spaces.push(dex)\n    }\n    let possiblePlace = firstPlayer.pieces.canPlaceGamepiece(spaces);\n    if(possiblePlace){\n      for(let i = 0; i < spaces.length; i++){\n        squares.push(spaces[i])\n      }\n      this.setState({placingPiece: true})\n      piece.positions = spaces\n    }\n  }\n\n  rotatePiece = () =>{\n\n  }\n\n  confirmPlace = () => {\n\n  }\n\n  componentDidMount(){\n    this.state.audio.play();\n    this.setState({musicPlaying:true});\n  }\n\n  playMusic = () =>{\n    const{musicPlaying,audio} = this.state;\n    let isPlaying = musicPlaying;\n    isPlaying = !isPlaying;\n    if(isPlaying){\n      audio.play();\n    }\n    else{\n      audio.pause();\n    }\n    this.setState({musicPlaying:isPlaying});\n  }\n\n  render(){\n    let {squares, firstPlayer, secondPlayer, gameOver, musicPlaying} = this.state;\n    let grid = squares.map((square,i) =>{\n      return(\n        <Square key = {i.toString()} id = {i} firstPlayer = {firstPlayer.character} secondPlayer = {secondPlayer.character} val = {squares[i]} handleClick = {this.handleClick}  />)\n    })\n    return (\n      <div className = \"backgroundStuff\">\n        <h1 className = \"glow\">{firstPlayer.won ? firstPlayer.character + \" Won\" : secondPlayer.won ? secondPlayer.character + \" Won\" : gameOver ? \"It's a Tie\" : \"Game Of Thrones\"}</h1>\n        <Dropdown isFirst = {true} chooseCharacter = {this.chooseCharacter} currentCharacter = {firstPlayer.character}/>\n        <Dropdown isFirst = {false} chooseCharacter = {this.chooseCharacter} currentCharacter = {secondPlayer.character}/>\n        <button onClick = {this.resetGame} className = \"resetButton\">Reset</button>\n        <button onClick = {this.playMusic} className = \"resetButton\">{musicPlaying ? \"Stop\": \"Play\"}</button>\n        {\n          this.state.placingPiece\n            ? (<button>Rotate</button>): (null)\n        }\n        <div className = \"grid\">\n          {grid}\n        </div>\n        <div className = \"characterGrid\">\n          <img className = \"playerOne\" src =  {this.getPicture(firstPlayer.character)} alt = {blank}></img>\n          <img className = \"playerTwo\" src =  {this.getPicture(secondPlayer.character)} alt = {blank}></img>\n        </div>\n        <div className = \"nameGrid\">\n          <h1>{firstPlayer.character}</h1>\n          <h1>{secondPlayer.character}</h1>\n        </div>\n        <div className = \"playerGrid\">\n          <h1>Player One</h1>\n          <h1>Player Two</h1>\n        </div>\n        <div className = \"winsGrid\">\n          <h1>{firstPlayer.wins}</h1>\n          <h1>{secondPlayer.wins}</h1>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}