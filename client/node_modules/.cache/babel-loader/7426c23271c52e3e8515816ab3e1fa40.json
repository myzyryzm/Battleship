{"ast":null,"code":"class Piece {\n  constructor(size) {\n    this.size = size;\n    this.positions = [];\n    this.hits = [];\n    this.alive = true;\n    this.rotation = 0;\n  }\n\n  rotatePiece() {\n    let rot = this.rotation;\n    let finPos = [];\n    let anchorPoint = rot === 0 || rot === 270 ? Math.min(this.positions) : Math.max(this.positions);\n    let anchorRemainder = anchorPoint % 10;\n    let nuRot = false;\n\n    for (let i = 0; i < 4; i++) {\n      rot += 90;\n      rot = rot < 360 ? rot : 0;\n      let canRotate = true;\n      finPos = [anchorPoint];\n      console.log(rot);\n\n      for (let j = 1; j < this.size; j++) {\n        if (rot === 0) {\n          let dex = anchorPoint + 10 * j;\n          finPos[j] = dex;\n\n          if (dex > 99) {\n            canRotate = false;\n            break;\n          }\n        } else if (rot === 90) {\n          let dex = anchorPoint - j;\n          finPos[j] = dex;\n\n          if (dex < 0 || dex % 10 != anchorRemainder) {\n            canRotate = false;\n            break;\n          }\n        } else if (rot === 180) {\n          let dex = anchorPoint - 10 * j;\n          finPos[j] = dex;\n\n          if (dex < 0) {\n            canRotate = false;\n            break;\n          }\n        } else if (rot === 270) {\n          let dex = anchorPoint + j;\n          finPos[j] = dex;\n\n          if (dex > 99 || dex % 10 != anchorRemainder) {\n            canRotate = false;\n            break;\n          }\n        }\n      }\n\n      if (canRotate) {\n        nuRot = true;\n        break;\n      }\n    }\n\n    if (nuRot) {\n      this.positions = finPos;\n      this.rotation = rot;\n    }\n  }\n\n}\n\nclass PlayerPieces {\n  constructor() {\n    this.gamePieces = [new Piece(2), new Piece(3), new Piece(3), new Piece(4), new Piece(5)];\n    this.squares = Array(100).fill(0);\n  }\n\n  canPlaceGamepiece(arr) {\n    let canPlace = true;\n\n    for (let i = 0; i < arr.length; i++) {\n      if (this.squares.includes(arr[i])) {\n        canPlace = false;\n        break;\n      }\n    }\n\n    return canPlace;\n  }\n\n  addPiece(spaces) {\n    for (let i = 0; i < spaces.length; i++) {\n      this.squares[spaces[i]] = 1;\n    }\n  }\n\n  rotatePiece(dex) {\n    let initSpaces = this.gamePieces[dex].positions;\n    this.gamePieces[dex].rotatePiece();\n    let nuSpaces = this.gamePieces[dex].positions;\n\n    for (let i = 0; i < initSpaces.length; i++) {\n      this.squares[initSpaces[i]] = 0;\n      this.squares[nuSpaces[i]] = 1;\n    }\n  }\n\n}\n\nlet playerPieces = new PlayerPieces();\nexport default playerPieces;","map":{"version":3,"sources":["/Users/ryzm/Desktop/Battleship/src/playerPieces.js"],"names":["Piece","constructor","size","positions","hits","alive","rotation","rotatePiece","rot","finPos","anchorPoint","Math","min","max","anchorRemainder","nuRot","i","canRotate","console","log","j","dex","PlayerPieces","gamePieces","squares","Array","fill","canPlaceGamepiece","arr","canPlace","length","includes","addPiece","spaces","initSpaces","nuSpaces","playerPieces"],"mappings":"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","sourcesContent":["class Piece{\n  constructor(size){\n    this.size = size;\n    this.positions = [];\n    this.hits = [];\n    this.alive = true;\n    this.rotation = 0;\n  }\n\n  rotatePiece(){\n    let rot = this.rotation;\n    let finPos = [];\n    let anchorPoint = rot === 0 || rot === 270 ? Math.min(this.positions) : Math.max(this.positions);\n    let anchorRemainder = anchorPoint % 10;\n    let nuRot = false;\n    for(let i = 0; i < 4; i++){\n      rot += 90;\n      rot = rot < 360 ? rot : 0;\n      let canRotate = true;\n      finPos = [anchorPoint]\n      console.log(rot);\n      for(let j = 1; j < this.size; j++){\n        if(rot === 0){\n          let dex = anchorPoint + 10 * j\n          finPos[j] = dex\n          if(dex > 99){\n            canRotate = false;\n            break;\n          }\n        }\n        else if(rot === 90){\n          let dex = anchorPoint - j\n          finPos[j] = dex\n          if(dex < 0 || dex % 10 != anchorRemainder){\n            canRotate = false;\n            break;\n          }\n        }\n        else if(rot === 180){\n          let dex = anchorPoint - 10 * j\n          finPos[j] = dex\n          if(dex < 0){\n            canRotate = false;\n            break;\n          }\n        }\n        else if(rot === 270){\n          let dex = anchorPoint + j\n          finPos[j] = dex\n          if(dex > 99 || dex % 10 != anchorRemainder){\n            canRotate = false;\n            break;\n          }\n        }\n      }\n      if(canRotate){\n        nuRot = true;\n        break;\n      }\n    }\n    if(nuRot){\n      this.positions = finPos;\n      this.rotation = rot;\n    }\n  }\n}\n\nclass PlayerPieces{\n  constructor(){\n    this.gamePieces = [new Piece(2), new Piece(3), new Piece(3), new Piece(4), new Piece(5)];\n    this.squares = Array(100).fill(0);\n  }\n  canPlaceGamepiece(arr){\n    let canPlace = true;\n    for(let i = 0; i < arr.length; i++){\n      if(this.squares.includes(arr[i])){\n        canPlace = false;\n        break;\n      }\n    }\n    return canPlace;\n  }\n\n  addPiece(spaces){\n    for(let i = 0; i < spaces.length; i++){\n      this.squares[spaces[i]] = 1;\n    }\n  }\n\n  rotatePiece(dex){\n    let initSpaces = this.gamePieces[dex].positions;\n    this.gamePieces[dex].rotatePiece();\n    let nuSpaces = this.gamePieces[dex].positions;\n    for(let i = 0; i < initSpaces.length; i++){\n      this.squares[initSpaces[i]] = 0;\n      this.squares[nuSpaces[i]] = 1;\n    }\n  }\n}\n\nlet playerPieces = new PlayerPieces()\n\n\nexport default playerPieces;\n"]},"metadata":{},"sourceType":"module"}