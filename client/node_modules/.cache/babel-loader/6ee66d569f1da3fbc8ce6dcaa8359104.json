{"ast":null,"code":"var _jsxFileName = \"/Users/ryzm/Desktop/Battleship/src/Board.js\";\nimport React, { Component } from 'react';\nimport Square from \"./Square.js\";\nimport winningConditions from './winningConditions.js';\nimport playerPieces from './playerPieces.js';\nimport characters from \"./characters.js\";\nimport './App.css';\nimport Dropdown from './Dropdown.js';\nimport blank from \"./blank.png\";\nimport arya from \"./faces/arya.png\";\nimport bran from \"./faces/bran.png\";\nimport brienne from \"./faces/brienne.png\";\nimport cersei from \"./faces/cersei.png\";\nimport daenerys from \"./faces/daenerys.png\";\nimport davos from \"./faces/davos.png\";\nimport euron from \"./faces/euron.png\";\nimport greyWorm from \"./faces/greyWorm.png\";\nimport hound from \"./faces/hound.png\";\nimport jamie from \"./faces/jamie.png\";\nimport jonSnow from \"./faces/jonSnow.png\";\nimport jorah from \"./faces/jorah.png\";\nimport melisandre from \"./faces/melisandre.png\";\nimport missandei from \"./faces/missandei.png\";\nimport nightKing from \"./faces/nightKing.png\";\nimport samwell from \"./faces/samwell.png\";\nimport sansa from \"./faces/sansa.png\";\nimport theon from \"./faces/theon.png\";\nimport tyrion from \"./faces/tyrion.png\";\nimport varys from \"./faces/varys.png\";\nimport theme from \"./theme.mp3\";\nconst audio = new Audio(theme);\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getPicture = character => {\n      switch (character) {\n        case \"Arya Stark\":\n          return arya;\n\n        case \"Bran Stark\":\n          return bran;\n\n        case \"Brienne of Tarth\":\n          return brienne;\n\n        case \"Cersei Lannister\":\n          return cersei;\n\n        case \"Daenerys Targaryean\":\n          return daenerys;\n\n        case \"Davos Seaworth\":\n          return davos;\n\n        case \"Euron Greyjoy\":\n          return euron;\n\n        case \"Grey Worm\":\n          return greyWorm;\n\n        case \"The Hound\":\n          return hound;\n\n        case \"Jamie Lannister\":\n          return jamie;\n\n        case \"Jon Snow\":\n          return jonSnow;\n\n        case \"Jorah Mormont\":\n          return jorah;\n\n        case \"Melisandre\":\n          return melisandre;\n\n        case \"Missandei\":\n          return missandei;\n\n        case \"Night King\":\n          return nightKing;\n\n        case \"Samwell Tarly\":\n          return samwell;\n\n        case \"Sansa Stark\":\n          return sansa;\n\n        case \"Theon Greyjoy\":\n          return theon;\n\n        case \"Tyrion Lannister\":\n          return tyrion;\n\n        case \"Varys\":\n          return varys;\n      }\n\n      return jonSnow;\n    };\n\n    this.checkIfWinner = () => {\n      let _this$state = this.state,\n          firstPlayer = _this$state.firstPlayer,\n          secondPlayer = _this$state.secondPlayer;\n      let firstWon = false;\n\n      for (let i = 0; i < winningConditions.length; i++) {\n        for (let j = 0; j < winningConditions[i].length; j++) {\n          if (firstPlayer.spaces.includes(winningConditions[i][j])) {\n            firstWon = true;\n          } else {\n            firstWon = false;\n            break;\n          }\n        }\n\n        if (firstWon) {\n          break;\n        }\n      }\n\n      if (firstWon) {\n        this.setState({\n          gameOver: true\n        });\n        firstPlayer[\"won\"] = true;\n        let nuWins = firstPlayer.wins + 1;\n        firstPlayer[\"wins\"] = nuWins;\n        this.setState({\n          firstPlayer\n        });\n        return;\n      }\n\n      let secondWon = false;\n\n      for (let i = 0; i < winningConditions.length; i++) {\n        for (let j = 0; j < winningConditions[i].length; j++) {\n          if (secondPlayer.spaces.includes(winningConditions[i][j])) {\n            secondWon = true;\n          } else {\n            secondWon = false;\n            break;\n          }\n        }\n\n        if (secondWon) {\n          break;\n        }\n      }\n\n      if (secondWon) {\n        this.setState({\n          gameOver: true\n        });\n        secondPlayer[\"won\"] = true;\n        let nuWins = secondPlayer.wins + 1;\n        secondPlayer[\"wins\"] = nuWins;\n        this.setState({\n          secondPlayer\n        });\n        return;\n      }\n\n      const squares = this.state.squares;\n      let endGame = true;\n\n      for (let i = 0; i < squares.length; i++) {\n        if (squares[i] === null) {\n          endGame = false;\n          break;\n        }\n      }\n\n      if (endGame) {\n        this.setState({\n          gameOver: true\n        });\n      }\n    };\n\n    this.handleClick = id => {\n      let _this$state2 = this.state,\n          gameStarted = _this$state2.gameStarted,\n          placingPiece = _this$state2.placingPiece,\n          firstPlayerTurn = _this$state2.firstPlayerTurn,\n          firstPlayer = _this$state2.firstPlayer,\n          secondPlayer = _this$state2.secondPlayer,\n          gameOver = _this$state2.gameOver;\n\n      if (gameOver) {\n        return;\n      }\n\n      if (!gameStarted) {\n        if (!placingPiece) {\n          this.placePiece(id);\n        }\n      } else {\n        if (firstPlayerTurn) {\n          this.attackSquare(id);\n        }\n      }\n    };\n\n    this.attackSquare = id => {\n      let _this$state3 = this.state,\n          firstPlayerTurn = _this$state3.firstPlayerTurn,\n          secondPlayer = _this$state3.secondPlayer;\n\n      if (firstPlayerTurn) {\n        let pieces = secondPlayer.pieces;\n\n        if (pieces.canAttackPiece(id)) {\n          alert(pieces.attackPiece(id));\n          secondPlayer[\"pieces\"] = pieces;\n          this.setState({\n            secondPlayer\n          });\n          this.setState({\n            firstPlayerTurn: false\n          });\n        }\n      }\n    };\n\n    this.startAITurn = () => {\n      this.setState({\n        showingBoard1: true\n      });\n    };\n\n    this.getRandomGuess = () => {\n      let firstPlayer = this.state.firstPlayer;\n      let squares = firstPlayer.pieces.squares;\n      let id = Math.floor(Math.random() * 100);\n\n      if (squares[id] <= 1) {\n        return id;\n      }\n\n      return this.getRandomGuess();\n    };\n\n    this.aiTurn = () => {\n      const _this$state4 = this.state,\n            ai = _this$state4.ai,\n            firstPlayer = _this$state4.firstPlayer;\n      let pieces = firstPlayer.pieces;\n      let hits = ai.hits;\n      let guesses = ai.guesses;\n      let hitDirection = ai.hitDirection;\n      let nextGuess = 0;\n      let guessDirection = \"\";\n\n      if (hits.length === 0) {\n        nextGuess = this.getRandomGuess();\n      } else if (hits.length === guesses.length) {\n        let prevHit = hits[hits.length - 1];\n\n        if (hits.length === 1) {\n          nextGuess = prevHit + 10;\n\n          if (prevHit < 90 && pieces.canAttackPiece(nextGuess)) {\n            guessDirection = \"Up\";\n          } else {\n            nextGuess = prevHit - 10;\n            guessDirection = \"Down\";\n          }\n        } else {\n          let prevPrevHit = hits[hits.length - 2];\n          let diff = prevHit - prevPrevHit;\n\n          if (diff === 10) {\n            nextGuess = prevHit + 10;\n\n            if (prevHit < 90 && pieces.canAttackPiece(nextGuess)) {\n              guessDirection = \"Up\";\n            } else {\n              nextGuess = hits[0] - 10;\n              guessDirection = \"Down\";\n            }\n          } else if (diff === -10) {\n            nextGuess = prevHit - 10;\n\n            if (prevHit > 9 && pieces.canAttackPiece(nextGuess)) {\n              guessDirection = \"Down\";\n            } else {\n              nextGuess = hits[0] + 10;\n              guessDirection = \"Up\";\n            }\n          } else if (diff === 1) {\n            let prevRemainder = prevHit % 10;\n            nextGuess = prevHit + 1;\n\n            if (prevRemainder != 9 && pieces.canAttackPiece(nextGuess)) {\n              guessDirection = \"Right\";\n            } else {\n              nextGuess = hits[0] - 1;\n              guessDirection = \"Left\";\n            }\n          } else if (diff === -1) {\n            let prevRemainder = prevHit % 10;\n            nextGuess = prevHit - 1;\n\n            if (prevRemainder != 0 && pieces.canAttackPiece(nextGuess)) {\n              guessDirection = \"Left\";\n            } else {\n              nextGuess = hits[0] + 1;\n              guessDirection = \"Right\";\n            }\n          }\n        }\n      } else {\n        if (hits.length === 1) {\n          let firstHit = hits[0];\n          let firstRem = firstHit % 10;\n          let canGuessUp = !hits.includes(firstHit + 10) && firstHit < 90 && pieces.canAttackPiece(firstHit + 10);\n          let canGuessDown = !hits.includes(firstHit - 10) && firstHit > 9 && pieces.canAttackPiece(firstHit - 10);\n          let canGuessRight = !hits.includes(firstHit + 1) && firstRem < 9 && pieces.canAttackPiece(firstHit + 1);\n          let canGuessLeft = !hits.includes(firstHit - 1) && firstRem > 0 && pieces.canAttackPiece(firstHit - 1);\n\n          if (canGuessUp) {\n            nextGuess = firstHit + 10;\n            guessDirection = \"Up\";\n          } else if (canGuessDown) {\n            nextGuess = firstHit - 10;\n            guessDirection = \"Down\";\n          } else if (canGuessRight) {\n            nextGuess = firstHit + 1;\n            guessDirection = \"Right\";\n          } else if (canGuessLeft) {\n            nextGuess = firstHit - 1;\n            guessDirection = \"Left\";\n          }\n        } else {\n          let prevHit = hits[hits.length - 1];\n          let prevPrevHit = hits[hits.length - 2];\n          let firstHit = hits[0];\n          let prevGuess = guesses[guesses.length - 1];\n\n          if (prevHit != prevGuess) {\n            //switch directions\n            let vertical = hits.includes(firstHit + 10);\n            let horizontal = hits.includes(firstHit + 1);\n\n            if (vertical) {\n              nextGuess = firstHit - 10;\n              guessDirection = \"Down\";\n            } else {\n              nextGuess = firstHit - 1;\n              guessDirection = \"Left\";\n            }\n          } else {\n            if (hitDirection === \"Up\") {} else if (hitDirection === \"Down\") {\n              guessDirection = \"Down\";\n              nextGuess = prevHit - 10;\n            } else if (hitDirection === \"Right\") {\n              let rem = prevHit % 10;\n\n              if (rem < 9 && pieces.canAttackPiece(prevHit + 1)) {\n                guessDirection = \"Right\";\n                nextGuess = prevHit + 1;\n              } else {\n                guessDirection = \"Left\";\n                nextGuess = firstHit - 1;\n              }\n            } else if (hitDirection === \"Left\") {\n              guessDirection = \"Left\";\n              nextGuess = prevHit - 1;\n            }\n          }\n        }\n      }\n\n      guesses.push(nextGuess);\n\n      if (pieces.aiAttackPiece(nextGuess)) {\n        hits.push(nextGuess);\n        hitDirection = guessDirection;\n      }\n\n      firstPlayer[\"pieces\"] = pieces;\n      this.setState({\n        firstPlayer\n      });\n      ai[\"hits\"] = hits;\n      ai[\"guesses\"] = guesses;\n      ai[\"hitDirection\"] = hitDirection;\n      this.setState({\n        ai\n      });\n    };\n\n    this.resetGame = () => {\n      let _this$state5 = this.state,\n          firstPlayer = _this$state5.firstPlayer,\n          secondPlayer = _this$state5.secondPlayer;\n      firstPlayer[\"spaces\"] = [];\n      firstPlayer[\"won\"] = false;\n      secondPlayer[\"spaces\"] = [];\n      secondPlayer[\"won\"] = false;\n      let s = Array(9).fill(null);\n      this.setState({\n        squares: s\n      });\n      this.setState({\n        firstPlayer\n      });\n      this.setState({\n        secondPlayer\n      });\n      this.setState({\n        firstPlayerTurn: true\n      });\n      this.setState({\n        gameOver: false\n      });\n    };\n\n    this.chooseCharacter = (isFirst, character) => {\n      let _this$state6 = this.state,\n          firstPlayer = _this$state6.firstPlayer,\n          secondPlayer = _this$state6.secondPlayer;\n\n      if (isFirst) {\n        firstPlayer[\"character\"] = character;\n        this.setState({\n          firstPlayer\n        });\n      } else {\n        secondPlayer[\"character\"] = character;\n        this.setState({\n          secondPlayer\n        });\n      }\n    };\n\n    this.placePiece = id => {\n      let firstPlayer = this.state.firstPlayer;\n      let pieces = firstPlayer.pieces;\n      let size = pieces.gamePieces[firstPlayer.currentPiece].size;\n      let spaces = [];\n\n      for (let i = 0; i < size; i++) {\n        let dex = id + 10 * i;\n\n        if (dex > 99) {\n          return;\n        }\n\n        spaces.push(dex);\n      }\n\n      if (pieces.canPlaceGamepiece(spaces)) {\n        pieces.addPiece(spaces, firstPlayer.currentPiece);\n        firstPlayer[\"pieces\"] = pieces;\n        this.setState({\n          firstPlayer\n        });\n        this.setState({\n          placingPiece: true\n        });\n      }\n    };\n\n    this.rotatePiece = () => {\n      let firstPlayer = this.state.firstPlayer;\n      let pieces = firstPlayer.pieces;\n      pieces.rotatePiece(firstPlayer.currentPiece);\n      firstPlayer[\"pieces\"] = pieces;\n      this.setState({\n        firstPlayer\n      });\n    };\n\n    this.confirmPlace = () => {\n      let firstPlayer = this.state.firstPlayer;\n      let pieces = firstPlayer.pieces;\n      pieces.setOriginalSquares();\n      firstPlayer[\"currentPiece\"] = firstPlayer.currentPiece + 1;\n      this.setState({\n        firstPlayer\n      });\n      this.setState({\n        placingPiece: false\n      });\n\n      if (firstPlayer.currentPiece >= pieces.gamePieces.length) {\n        this.createAIBoard();\n      }\n    };\n\n    this.createAIBoard = () => {\n      for (let i = 0; i < 5; i++) {\n        this.createAIPiece(i);\n      }\n\n      this.setState({\n        gameStarted: true\n      });\n      this.setState({\n        showingBoard1: false\n      });\n    };\n\n    this.createAIPiece = dex => {\n      let secondPlayer = this.state.secondPlayer;\n      let pieces = secondPlayer.pieces;\n      let size = pieces.gamePieces[dex].size;\n      let spaces = [];\n      let canPlace = true;\n      let id = Math.floor(Math.random() * 100);\n\n      for (let i = 0; i < size; i++) {\n        let dex = id + 10 * i;\n\n        if (dex > 99) {\n          canPlace = false;\n        }\n\n        spaces.push(dex);\n      }\n\n      if (!canPlace) {\n        this.createAIPiece(dex);\n      } else {\n        if (pieces.canPlaceGamepiece(spaces)) {\n          pieces.addPiece(spaces, dex);\n          let numRot = Math.floor(Math.random() * 3);\n\n          for (let i = 0; i < numRot; i++) {\n            pieces.rotatePiece(dex);\n          }\n\n          secondPlayer[\"pieces\"] = pieces;\n          this.setState({\n            secondPlayer\n          });\n        } else {\n          this.createAIPiece(dex);\n        }\n      }\n    };\n\n    this.playMusic = () => {\n      const musicPlaying = this.state.musicPlaying;\n      let isPlaying = musicPlaying;\n      isPlaying = !isPlaying;\n\n      if (isPlaying) {\n        audio.play();\n      } else {\n        audio.pause();\n      }\n\n      this.setState({\n        musicPlaying: isPlaying\n      });\n    };\n\n    this.state = {\n      squares: Array(100).fill(null),\n      firstPlayer: {\n        spaces: [],\n        hits: [],\n        misses: [],\n        pieces: playerPieces[0],\n        won: false,\n        character: characters[0],\n        wins: 0,\n        currentPiece: 0\n      },\n      secondPlayer: {\n        spaces: [],\n        hits: [],\n        misses: [],\n        pieces: playerPieces[1],\n        won: false,\n        character: characters[1],\n        wins: 0\n      },\n      ai: {\n        guesses: [],\n        hits: [],\n        hitDirection: \"\"\n      },\n      showingBoard1: true,\n      placingPiece: false,\n      musicPlaying: false,\n      firstPlayerTurn: true,\n      gameOver: false,\n      gameStarted: false\n    };\n  }\n\n  componentDidMount() {\n    audio.play();\n    this.setState({\n      musicPlaying: true\n    });\n  }\n\n  render() {\n    let _this$state7 = this.state,\n        squares = _this$state7.squares,\n        firstPlayer = _this$state7.firstPlayer,\n        secondPlayer = _this$state7.secondPlayer,\n        gameOver = _this$state7.gameOver,\n        musicPlaying = _this$state7.musicPlaying,\n        showingBoard1 = _this$state7.showingBoard1;\n    let grid = squares.map((square, i) => {\n      return React.createElement(Square, {\n        key: i.toString(),\n        id: i,\n        firstPlayer: firstPlayer.character,\n        secondPlayer: secondPlayer.character,\n        firstVal: firstPlayer.pieces.squares[i],\n        secondVal: secondPlayer.pieces.squares[i],\n        showingBoard1: showingBoard1,\n        handleClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 508\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      className: \"backgroundStuff\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"glow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512\n      },\n      __self: this\n    }, firstPlayer.won ? firstPlayer.character + \" Won\" : secondPlayer.won ? secondPlayer.character + \" Won\" : gameOver ? \"It's a Tie\" : \"BattleThrones\"), React.createElement(Dropdown, {\n      isFirst: true,\n      chooseCharacter: this.chooseCharacter,\n      currentCharacter: firstPlayer.character,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    }), React.createElement(Dropdown, {\n      isFirst: false,\n      chooseCharacter: this.chooseCharacter,\n      currentCharacter: secondPlayer.character,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.resetGame,\n      className: \"resetButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }, \"Reset\"), React.createElement(\"button\", {\n      onClick: this.playMusic,\n      className: \"resetButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }, musicPlaying ? \"Stop Music\" : \"Play Music\"), this.state.placingPiece ? React.createElement(\"button\", {\n      onClick: this.rotatePiece,\n      className: \"resetButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    }, \"Rotate\") : null, this.state.placingPiece ? React.createElement(\"button\", {\n      onClick: this.confirmPlace,\n      className: \"resetButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }, \"Confirm\") : null, React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }, grid), React.createElement(\"div\", {\n      className: \"characterGrid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"playerOne\",\n      src: this.getPicture(firstPlayer.character),\n      alt: blank,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"playerTwo\",\n      src: this.getPicture(secondPlayer.character),\n      alt: blank,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"nameGrid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    }, firstPlayer.character), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528\n      },\n      __self: this\n    }, secondPlayer.character)), React.createElement(\"div\", {\n      className: \"playerGrid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }, \"Player One\"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }, \"Player Two\")), React.createElement(\"div\", {\n      className: \"winsGrid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, firstPlayer.wins), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }, secondPlayer.wins)));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/ryzm/Desktop/Battleship/src/Board.js"],"names":["React","Component","Square","winningConditions","playerPieces","characters","Dropdown","blank","arya","bran","brienne","cersei","daenerys","davos","euron","greyWorm","hound","jamie","jonSnow","jorah","melisandre","missandei","nightKing","samwell","sansa","theon","tyrion","varys","theme","audio","Audio","Board","constructor","props","getPicture","character","checkIfWinner","state","firstPlayer","secondPlayer","firstWon","i","length","j","spaces","includes","setState","gameOver","nuWins","wins","secondWon","squares","endGame","handleClick","id","gameStarted","placingPiece","firstPlayerTurn","placePiece","attackSquare","pieces","canAttackPiece","alert","attackPiece","startAITurn","showingBoard1","getRandomGuess","Math","floor","random","aiTurn","ai","hits","guesses","hitDirection","nextGuess","guessDirection","prevHit","prevPrevHit","diff","prevRemainder","firstHit","firstRem","canGuessUp","canGuessDown","canGuessRight","canGuessLeft","prevGuess","vertical","horizontal","rem","push","aiAttackPiece","resetGame","s","Array","fill","chooseCharacter","isFirst","size","gamePieces","currentPiece","dex","canPlaceGamepiece","addPiece","rotatePiece","confirmPlace","setOriginalSquares","createAIBoard","createAIPiece","canPlace","numRot","playMusic","musicPlaying","isPlaying","play","pause","misses","won","componentDidMount","render","grid","map","square","toString"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Square from \"./Square.js\";\nimport winningConditions from './winningConditions.js';\nimport playerPieces from './playerPieces.js';\nimport characters from \"./characters.js\";\nimport './App.css';\nimport Dropdown from './Dropdown.js';\nimport blank from \"./blank.png\";\nimport arya from \"./faces/arya.png\";\nimport bran from \"./faces/bran.png\";\nimport brienne from \"./faces/brienne.png\";\nimport cersei from \"./faces/cersei.png\";\nimport daenerys from \"./faces/daenerys.png\";\nimport davos from \"./faces/davos.png\";\nimport euron from \"./faces/euron.png\";\nimport greyWorm from \"./faces/greyWorm.png\";\nimport hound from \"./faces/hound.png\";\nimport jamie from \"./faces/jamie.png\";\nimport jonSnow from \"./faces/jonSnow.png\";\nimport jorah from \"./faces/jorah.png\";\nimport melisandre from \"./faces/melisandre.png\";\nimport missandei from \"./faces/missandei.png\";\nimport nightKing from \"./faces/nightKing.png\";\nimport samwell from \"./faces/samwell.png\";\nimport sansa from \"./faces/sansa.png\";\nimport theon from \"./faces/theon.png\";\nimport tyrion from \"./faces/tyrion.png\";\nimport varys from \"./faces/varys.png\";\nimport theme from \"./theme.mp3\";\nconst audio  = new Audio(theme);\n\nclass Board extends Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      squares: Array(100).fill(null),\n      firstPlayer : {\n        spaces: [],\n        hits: [],\n        misses: [],\n        pieces: playerPieces[0],\n        won : false,\n        character: characters[0],\n        wins: 0,\n        currentPiece: 0\n      },\n      secondPlayer : {\n        spaces: [],\n        hits: [],\n        misses: [],\n        pieces: playerPieces[1],\n        won : false,\n        character: characters[1],\n        wins: 0\n      },\n      ai: {\n        guesses: [],\n        hits: [],\n        hitDirection: \"\"\n      },\n      showingBoard1: true,\n      placingPiece: false,\n      musicPlaying: false,\n      firstPlayerTurn : true,\n      gameOver: false,\n      gameStarted: false\n    }\n  }\n\n  getPicture = (character) => {\n    switch(character){\n      case \"Arya Stark\":\n        return arya;\n      case \"Bran Stark\":\n        return bran;\n      case \"Brienne of Tarth\":\n        return brienne;\n      case \"Cersei Lannister\":\n        return cersei;\n      case \"Daenerys Targaryean\":\n        return daenerys;\n      case \"Davos Seaworth\":\n        return davos;\n      case \"Euron Greyjoy\":\n        return euron;\n      case \"Grey Worm\":\n        return greyWorm;\n      case \"The Hound\":\n        return hound;\n      case \"Jamie Lannister\":\n        return jamie;\n      case \"Jon Snow\":\n        return jonSnow;\n      case \"Jorah Mormont\":\n        return jorah;\n      case \"Melisandre\":\n        return melisandre;\n      case \"Missandei\":\n        return missandei;\n      case \"Night King\":\n        return nightKing;\n      case \"Samwell Tarly\":\n        return samwell;\n      case \"Sansa Stark\":\n        return sansa;\n      case \"Theon Greyjoy\":\n        return theon;\n      case \"Tyrion Lannister\":\n        return tyrion;\n      case \"Varys\":\n        return varys;\n    }\n    return jonSnow;\n  }\n\n  checkIfWinner = () =>{\n    let { firstPlayer, secondPlayer} = this.state;\n    let firstWon = false;\n    for(let i = 0; i < winningConditions.length; i++){\n      for(let j = 0; j < winningConditions[i].length; j++){\n        if(firstPlayer.spaces.includes(winningConditions[i][j])){\n          firstWon = true;\n        }\n        else {\n          firstWon = false;\n          break;\n        }\n      }\n      if(firstWon){\n        break;\n      }\n    }\n    if(firstWon){\n      this.setState({gameOver: true});\n      firstPlayer[\"won\"] = true;\n      let nuWins = firstPlayer.wins + 1;\n      firstPlayer[\"wins\"] = nuWins;\n      this.setState({firstPlayer});\n      return;\n    }\n\n    let secondWon = false;\n    for(let i = 0; i < winningConditions.length; i++){\n      for(let j = 0; j < winningConditions[i].length; j++){\n        if(secondPlayer.spaces.includes(winningConditions[i][j])){\n          secondWon = true;\n        }\n        else {\n          secondWon = false;\n          break;\n        }\n      }\n      if(secondWon){\n        break;\n      }\n    }\n\n    if(secondWon){\n      this.setState({gameOver: true});\n      secondPlayer[\"won\"] = true\n      let nuWins = secondPlayer.wins + 1;\n      secondPlayer[\"wins\"] = nuWins;\n      this.setState({secondPlayer});\n      return;\n    }\n    const {squares} = this.state;\n    let endGame = true;\n    for(let i = 0; i < squares.length; i++){\n      if(squares[i] === null){\n        endGame = false;\n        break;\n      }\n    }\n    if(endGame){\n      this.setState({gameOver: true});\n    }\n  }\n\n  handleClick = (id) => {\n    let {gameStarted, placingPiece, firstPlayerTurn, firstPlayer, secondPlayer, gameOver} = this.state;\n    if(gameOver){\n      return;\n    }\n    if(!gameStarted){\n      if(!placingPiece){\n        this.placePiece(id)\n      }\n    }\n    else {\n      if(firstPlayerTurn){\n        this.attackSquare(id);\n      }\n    }\n  }\n\n  attackSquare = (id) => {\n    let {firstPlayerTurn, secondPlayer} = this.state;\n    if(firstPlayerTurn){\n      let pieces = secondPlayer.pieces;\n      if(pieces.canAttackPiece(id)){\n        alert(pieces.attackPiece(id));\n        secondPlayer[\"pieces\"] = pieces;\n        this.setState({secondPlayer})\n        this.setState({firstPlayerTurn: false})\n      }\n    }\n  }\n\n  startAITurn = () => {\n    this.setState({showingBoard1: true})\n  }\n\n  getRandomGuess = () => {\n    let {firstPlayer} = this.state;\n    let squares = firstPlayer.pieces.squares;\n    let id = Math.floor(Math.random() * 100);\n    if(squares[id] <= 1){\n      return id;\n    }\n    return this.getRandomGuess();\n  }\n\n  aiTurn = () => {\n    const {ai,firstPlayer} = this.state;\n    let pieces = firstPlayer.pieces;\n    let hits = ai.hits;\n    let guesses = ai.guesses;\n    let hitDirection = ai.hitDirection;\n    let nextGuess = 0;\n    let guessDirection = \"\";\n\n    if(hits.length === 0) {\n      nextGuess = this.getRandomGuess();\n    }\n    else if(hits.length === guesses.length) {\n      let prevHit = hits[hits.length - 1];\n      if(hits.length === 1){\n        nextGuess = prevHit + 10;\n        if(prevHit < 90 && pieces.canAttackPiece(nextGuess)){\n          guessDirection = \"Up\";\n        }\n        else {\n          nextGuess = prevHit - 10;\n          guessDirection = \"Down\";\n        }\n      }\n      else {\n        let prevPrevHit = hits[hits.length - 2];\n        let diff = prevHit - prevPrevHit;\n        if(diff === 10){\n          nextGuess = prevHit + 10;\n          if(prevHit < 90 && pieces.canAttackPiece(nextGuess)){\n            guessDirection = \"Up\";\n          }\n          else{\n            nextGuess = hits[0] - 10;\n            guessDirection = \"Down\";\n          }\n        }\n        else if(diff === -10){\n          nextGuess = prevHit - 10;\n          if(prevHit > 9 && pieces.canAttackPiece(nextGuess)){\n            guessDirection = \"Down\";\n          }\n          else{\n            nextGuess = hits[0] + 10;\n            guessDirection = \"Up\";\n          }\n        }\n        else if(diff === 1){\n          let prevRemainder = prevHit % 10;\n          nextGuess = prevHit + 1;\n          if(prevRemainder != 9 && pieces.canAttackPiece(nextGuess)){\n            guessDirection = \"Right\";\n          }\n          else {\n            nextGuess = hits[0] - 1;\n            guessDirection = \"Left\";\n          }\n        }\n        else if(diff === -1){\n          let prevRemainder = prevHit % 10;\n          nextGuess = prevHit - 1;\n          if(prevRemainder != 0 && pieces.canAttackPiece(nextGuess)){\n            guessDirection = \"Left\";\n          }\n          else{\n            nextGuess = hits[0] + 1;\n            guessDirection = \"Right\";\n          }\n        }\n      }\n    }\n    else {\n      if(hits.length === 1){\n        let firstHit = hits[0];\n        let firstRem = firstHit % 10;\n        let canGuessUp = !hits.includes(firstHit + 10) && firstHit < 90 && pieces.canAttackPiece(firstHit + 10);\n        let canGuessDown = !hits.includes(firstHit - 10) && firstHit > 9 && pieces.canAttackPiece(firstHit - 10);\n        let canGuessRight = !hits.includes(firstHit + 1) && firstRem < 9 && pieces.canAttackPiece(firstHit + 1);\n        let canGuessLeft = !hits.includes(firstHit - 1) && firstRem > 0 && pieces.canAttackPiece(firstHit - 1);\n        if(canGuessUp){\n          nextGuess = firstHit + 10;\n          guessDirection = \"Up\";\n        }\n        else if(canGuessDown){\n          nextGuess = firstHit - 10;\n          guessDirection = \"Down\";\n        }\n        else if(canGuessRight){\n          nextGuess = firstHit + 1;\n          guessDirection = \"Right\";\n        }\n        else if(canGuessLeft){\n          nextGuess = firstHit - 1;\n          guessDirection = \"Left\";\n        }\n      }\n      else{\n        let prevHit = hits[hits.length - 1];\n        let prevPrevHit = hits[hits.length - 2];\n        let firstHit = hits[0];\n        let prevGuess = guesses[guesses.length - 1];\n        if(prevHit != prevGuess){\n          //switch directions\n          let vertical = hits.includes(firstHit + 10);\n          let horizontal = hits.includes(firstHit + 1);\n          if(vertical){\n            nextGuess = firstHit - 10;\n            guessDirection = \"Down\";\n          }\n          else{\n            nextGuess = firstHit - 1;\n            guessDirection = \"Left\";\n          }\n        }\n        else{\n          if(hitDirection === \"Up\"){\n\n          }\n          else if(hitDirection === \"Down\"){\n            guessDirection = \"Down\";\n            nextGuess = prevHit - 10;\n          }\n          else if(hitDirection === \"Right\"){\n            let rem = prevHit % 10;\n            if(rem < 9 && pieces.canAttackPiece(prevHit + 1)){\n              guessDirection = \"Right\";\n              nextGuess = prevHit + 1;\n            }\n            else{\n              guessDirection = \"Left\";\n              nextGuess = firstHit - 1;\n            }\n          }\n          else if(hitDirection === \"Left\"){\n            guessDirection = \"Left\";\n            nextGuess = prevHit - 1;\n          }\n        }\n      }\n    }\n    guesses.push(nextGuess);\n\n    if(pieces.aiAttackPiece(nextGuess)){\n      hits.push(nextGuess);\n      hitDirection = guessDirection;\n    }\n    firstPlayer[\"pieces\"] = pieces;\n    this.setState({firstPlayer})\n\n    ai[\"hits\"] = hits;\n    ai[\"guesses\"] = guesses;\n    ai[\"hitDirection\"] = hitDirection;\n    this.setState({ai});\n  }\n\n  resetGame = () => {\n    let {firstPlayer, secondPlayer} = this.state;\n    firstPlayer[\"spaces\"] = [];\n    firstPlayer[\"won\"] = false;\n    secondPlayer[\"spaces\"] = [];\n    secondPlayer[\"won\"] = false;\n    let s = Array(9).fill(null);\n    this.setState({squares : s});\n    this.setState({firstPlayer});\n    this.setState({secondPlayer});\n    this.setState({firstPlayerTurn : true});\n    this.setState({gameOver : false});\n  }\n\n  chooseCharacter = (isFirst, character) =>{\n    let {firstPlayer,secondPlayer} = this.state\n    if(isFirst){\n      firstPlayer[\"character\"] = character;\n      this.setState({firstPlayer});\n    }\n    else{\n      secondPlayer[\"character\"] = character;\n      this.setState({secondPlayer});\n    }\n  }\n\n  placePiece = (id) => {\n    let {firstPlayer} = this.state;\n    let pieces = firstPlayer.pieces;\n    let size = pieces.gamePieces[firstPlayer.currentPiece].size;\n    let spaces = [];\n    for(let i = 0; i < size; i++){\n      let dex = id + 10 * i\n      if(dex > 99){\n        return;\n      }\n      spaces.push(dex)\n    }\n    if(pieces.canPlaceGamepiece(spaces)){\n      pieces.addPiece(spaces, firstPlayer.currentPiece)\n      firstPlayer[\"pieces\"] = pieces;\n      this.setState({firstPlayer})\n      this.setState({placingPiece: true})\n    }\n  }\n\n  rotatePiece = () =>{\n    let {firstPlayer} = this.state;\n    let pieces = firstPlayer.pieces;\n    pieces.rotatePiece(firstPlayer.currentPiece);\n    firstPlayer[\"pieces\"] = pieces;\n    this.setState({firstPlayer});\n  }\n\n  confirmPlace = () => {\n    let {firstPlayer} = this.state;\n    let pieces = firstPlayer.pieces;\n    pieces.setOriginalSquares();\n    firstPlayer[\"currentPiece\"] = firstPlayer.currentPiece + 1;\n    this.setState({firstPlayer});\n    this.setState({placingPiece: false});\n    if(firstPlayer.currentPiece >= pieces.gamePieces.length){\n      this.createAIBoard();\n    }\n  }\n\n  createAIBoard = () => {\n    for(let i = 0; i < 5; i++){\n      this.createAIPiece(i);\n    }\n    this.setState({gameStarted: true})\n    this.setState({showingBoard1: false})\n  }\n\n  createAIPiece = (dex) => {\n    let {secondPlayer} = this.state;\n    let pieces = secondPlayer.pieces;\n    let size = pieces.gamePieces[dex].size;\n    let spaces = [];\n    let canPlace = true;\n    let id = Math.floor(Math.random() * 100)\n    for(let i = 0; i < size; i++){\n      let dex = id + 10 * i\n      if(dex > 99){\n        canPlace = false;\n      }\n      spaces.push(dex)\n    }\n    if(!canPlace){\n      this.createAIPiece(dex);\n    }\n    else {\n      if(pieces.canPlaceGamepiece(spaces)){\n        pieces.addPiece(spaces, dex)\n        let numRot = Math.floor(Math.random() * 3)\n        for(let i = 0; i < numRot; i++){\n          pieces.rotatePiece(dex);\n        }\n        secondPlayer[\"pieces\"] = pieces;\n        this.setState({secondPlayer})\n      }\n      else{\n        this.createAIPiece(dex);\n      }\n    }\n  }\n\n  componentDidMount(){\n    audio.play();\n    this.setState({musicPlaying:true});\n  }\n\n  playMusic = () =>{\n    const{musicPlaying} = this.state;\n    let isPlaying = musicPlaying;\n    isPlaying = !isPlaying;\n    if(isPlaying){\n      audio.play();\n    }\n    else{\n      audio.pause();\n    }\n    this.setState({musicPlaying:isPlaying});\n  }\n\n  render(){\n    let {squares, firstPlayer, secondPlayer, gameOver, musicPlaying, showingBoard1} = this.state;\n    let grid = squares.map((square,i) =>{\n      return(\n        <Square key = {i.toString()} id = {i} firstPlayer = {firstPlayer.character} secondPlayer = {secondPlayer.character} firstVal = {firstPlayer.pieces.squares[i]} secondVal = {secondPlayer.pieces.squares[i]} showingBoard1 = {showingBoard1} handleClick = {this.handleClick}  />)\n    })\n    return (\n      <div className = \"backgroundStuff\">\n        <h1 className = \"glow\">{firstPlayer.won ? firstPlayer.character + \" Won\" : secondPlayer.won ? secondPlayer.character + \" Won\" : gameOver ? \"It's a Tie\" : \"BattleThrones\"}</h1>\n        <Dropdown isFirst = {true} chooseCharacter = {this.chooseCharacter} currentCharacter = {firstPlayer.character}/>\n        <Dropdown isFirst = {false} chooseCharacter = {this.chooseCharacter} currentCharacter = {secondPlayer.character}/>\n        <button onClick = {this.resetGame} className = \"resetButton\">Reset</button>\n        <button onClick = {this.playMusic} className = \"resetButton\">{musicPlaying ? \"Stop Music\": \"Play Music\"}</button>\n        {this.state.placingPiece ? (<button onClick = {this.rotatePiece} className = \"resetButton\">Rotate</button>): (null)}\n        {this.state.placingPiece ? (<button onClick = {this.confirmPlace} className = \"resetButton\">Confirm</button>): (null)}\n        <div className = \"grid\">\n          {grid}\n        </div>\n        <div className = \"characterGrid\">\n          <img className = \"playerOne\" src =  {this.getPicture(firstPlayer.character)} alt = {blank}></img>\n          <img className = \"playerTwo\" src =  {this.getPicture(secondPlayer.character)} alt = {blank}></img>\n        </div>\n        <div className = \"nameGrid\">\n          <h1>{firstPlayer.character}</h1>\n          <h1>{secondPlayer.character}</h1>\n        </div>\n        <div className = \"playerGrid\">\n          <h1>Player One</h1>\n          <h1>Player Two</h1>\n        </div>\n        <div className = \"winsGrid\">\n          <h1>{firstPlayer.wins}</h1>\n          <h1>{secondPlayer.wins}</h1>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}