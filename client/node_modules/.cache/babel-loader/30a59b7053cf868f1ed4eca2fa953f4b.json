{"ast":null,"code":"var _jsxFileName = \"/Users/ryzm/Desktop/Battleship/src/Board.js\";\nimport React, { Component } from 'react';\nimport Square from \"./Square.js\";\nimport winningConditions from './winningConditions.js';\nimport playerPieces from './playerPieces.js';\nimport characters from \"./characters.js\";\nimport './App.css';\nimport Dropdown from './Dropdown.js';\nimport blank from \"./blank.png\";\nimport arya from \"./faces/arya.png\";\nimport bran from \"./faces/bran.png\";\nimport brienne from \"./faces/brienne.png\";\nimport cersei from \"./faces/cersei.png\";\nimport daenerys from \"./faces/daenerys.png\";\nimport davos from \"./faces/davos.png\";\nimport euron from \"./faces/euron.png\";\nimport greyWorm from \"./faces/greyWorm.png\";\nimport hound from \"./faces/hound.png\";\nimport jamie from \"./faces/jamie.png\";\nimport jonSnow from \"./faces/jonSnow.png\";\nimport jorah from \"./faces/jorah.png\";\nimport melisandre from \"./faces/melisandre.png\";\nimport missandei from \"./faces/missandei.png\";\nimport nightKing from \"./faces/nightKing.png\";\nimport samwell from \"./faces/samwell.png\";\nimport sansa from \"./faces/sansa.png\";\nimport theon from \"./faces/theon.png\";\nimport tyrion from \"./faces/tyrion.png\";\nimport varys from \"./faces/varys.png\";\nimport theme from \"./theme.mp3\";\nconst audio = new Audio(theme);\nconst fillArray = Array(100).fill(null);\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getPicture = character => {\n      switch (character) {\n        case \"Arya Stark\":\n          return arya;\n\n        case \"Bran Stark\":\n          return bran;\n\n        case \"Brienne of Tarth\":\n          return brienne;\n\n        case \"Cersei Lannister\":\n          return cersei;\n\n        case \"Daenerys Targaryean\":\n          return daenerys;\n\n        case \"Davos Seaworth\":\n          return davos;\n\n        case \"Euron Greyjoy\":\n          return euron;\n\n        case \"Grey Worm\":\n          return greyWorm;\n\n        case \"The Hound\":\n          return hound;\n\n        case \"Jamie Lannister\":\n          return jamie;\n\n        case \"Jon Snow\":\n          return jonSnow;\n\n        case \"Jorah Mormont\":\n          return jorah;\n\n        case \"Melisandre\":\n          return melisandre;\n\n        case \"Missandei\":\n          return missandei;\n\n        case \"Night King\":\n          return nightKing;\n\n        case \"Samwell Tarly\":\n          return samwell;\n\n        case \"Sansa Stark\":\n          return sansa;\n\n        case \"Theon Greyjoy\":\n          return theon;\n\n        case \"Tyrion Lannister\":\n          return tyrion;\n\n        case \"Varys\":\n          return varys;\n      }\n\n      return jonSnow;\n    };\n\n    this.checkIfWinner = () => {\n      let _this$state = this.state,\n          firstPlayer = _this$state.firstPlayer,\n          secondPlayer = _this$state.secondPlayer;\n\n      if (firstPlayer.pieces.hasLost()) {\n        let secondWins = secondPlayer.wins + 1;\n        alert(\"You lost!\");\n        secondPlayer[\"wins\"] = secondWins;\n        secondPlayer[\"won\"] = true;\n        this.setState({\n          secondPlayer\n        });\n        this.setState({\n          gameOver: true\n        });\n      } else if (secondPlayer.pieces.hasLost()) {\n        let firstWins = firstPlayer.wins + 1;\n        alert(\"You won!\");\n        firstPlayer[\"wins\"] = firstWins;\n        firstPlayer[\"won\"] = true;\n        this.setState({\n          firstPlayer\n        });\n        this.setState({\n          gameOver: true\n        });\n      }\n    };\n\n    this.handleClick = id => {\n      let _this$state2 = this.state,\n          gameStarted = _this$state2.gameStarted,\n          placingPiece = _this$state2.placingPiece,\n          firstPlayerTurn = _this$state2.firstPlayerTurn,\n          gameOver = _this$state2.gameOver,\n          showingBoard1 = _this$state2.showingBoard1;\n\n      if (gameOver) {\n        return;\n      }\n\n      if (!gameStarted) {\n        if (!placingPiece) {\n          this.placePiece(id);\n        }\n      } else {\n        if (firstPlayerTurn && !showingBoard1) {\n          this.attackSquare(id);\n        }\n      }\n    };\n\n    this.attackSquare = id => {\n      let _this$state3 = this.state,\n          firstPlayerTurn = _this$state3.firstPlayerTurn,\n          secondPlayer = _this$state3.secondPlayer,\n          gameOver = _this$state3.gameOver;\n\n      if (firstPlayerTurn) {\n        let pieces = secondPlayer.pieces;\n\n        if (pieces.canAttackPiece(id)) {\n          let dex = pieces.attackPiece(id);\n          alert(this.getAlertText(dex, false));\n          this.checkIfWinner();\n          secondPlayer[\"pieces\"] = pieces;\n          this.setState({\n            secondPlayer\n          });\n          this.setState({\n            firstPlayerTurn: false\n          });\n\n          if (!gameOver) {\n            setTimeout(this.startAITurn(), 3000);\n          }\n        }\n      }\n    };\n\n    this.startAITurn = () => {\n      this.setState({\n        showingBoard1: true\n      });\n      this.aiTurn();\n    };\n\n    this.getRandomGuess = () => {\n      let firstPlayer = this.state.firstPlayer;\n      let squares = firstPlayer.pieces.squares;\n      let id = Math.floor(Math.random() * 100);\n\n      if (squares[id] <= 1) {\n        return id;\n      }\n\n      return this.getRandomGuess();\n    };\n\n    this.aiTurn = () => {\n      const _this$state4 = this.state,\n            ai = _this$state4.ai,\n            firstPlayer = _this$state4.firstPlayer;\n      let pieces = firstPlayer.pieces;\n      let hits = ai.hits;\n      let guesses = ai.guesses;\n      let hitDirection = ai.hitDirection;\n      let nextGuess = 0;\n      let guessDirection = \"\";\n\n      if (hits.length === 0) {\n        nextGuess = this.getRandomGuess();\n      } else if (hits.length === guesses.length) {\n        let prevHit = hits[hits.length - 1];\n\n        if (hits.length === 1) {\n          nextGuess = prevHit + 10;\n\n          if (prevHit < 90 && pieces.canAttackPiece(nextGuess)) {\n            guessDirection = \"Up\";\n          } else {\n            nextGuess = prevHit - 10;\n            guessDirection = \"Down\";\n          }\n        } else {\n          let prevPrevHit = hits[hits.length - 2];\n          let diff = prevHit - prevPrevHit;\n\n          if (diff === 10) {\n            nextGuess = prevHit + 10;\n\n            if (prevHit < 90 && pieces.canAttackPiece(nextGuess)) {\n              guessDirection = \"Up\";\n            } else {\n              nextGuess = hits[0] - 10;\n              guessDirection = \"Down\";\n            }\n          } else if (diff === -10) {\n            nextGuess = prevHit - 10;\n\n            if (prevHit > 9 && pieces.canAttackPiece(nextGuess)) {\n              guessDirection = \"Down\";\n            } else {\n              nextGuess = hits[0] + 10;\n              guessDirection = \"Up\";\n            }\n          } else if (diff === 1) {\n            let prevRemainder = prevHit % 10;\n            nextGuess = prevHit + 1;\n\n            if (prevRemainder != 9 && pieces.canAttackPiece(nextGuess)) {\n              guessDirection = \"Right\";\n            } else {\n              nextGuess = hits[0] - 1;\n              guessDirection = \"Left\";\n            }\n          } else if (diff === -1) {\n            let prevRemainder = prevHit % 10;\n            nextGuess = prevHit - 1;\n\n            if (prevRemainder != 0 && pieces.canAttackPiece(nextGuess)) {\n              guessDirection = \"Left\";\n            } else {\n              nextGuess = hits[0] + 1;\n              guessDirection = \"Right\";\n            }\n          }\n        }\n      } else {\n        if (hits.length === 1) {\n          let firstHit = hits[0];\n          let firstRem = firstHit % 10;\n          let canGuessUp = !hits.includes(firstHit + 10) && firstHit < 90 && pieces.canAttackPiece(firstHit + 10);\n          let canGuessDown = !hits.includes(firstHit - 10) && firstHit > 9 && pieces.canAttackPiece(firstHit - 10);\n          let canGuessRight = !hits.includes(firstHit + 1) && firstRem < 9 && pieces.canAttackPiece(firstHit + 1);\n          let canGuessLeft = !hits.includes(firstHit - 1) && firstRem > 0 && pieces.canAttackPiece(firstHit - 1);\n\n          if (canGuessUp) {\n            nextGuess = firstHit + 10;\n            guessDirection = \"Up\";\n          } else if (canGuessDown) {\n            nextGuess = firstHit - 10;\n            guessDirection = \"Down\";\n          } else if (canGuessRight) {\n            nextGuess = firstHit + 1;\n            guessDirection = \"Right\";\n          } else if (canGuessLeft) {\n            nextGuess = firstHit - 1;\n            guessDirection = \"Left\";\n          }\n        } else {\n          let prevHit = hits[hits.length - 1];\n          let prevPrevHit = hits[hits.length - 2];\n          let firstHit = hits[0];\n          let prevGuess = guesses[guesses.length - 1];\n\n          if (prevHit != prevGuess) {\n            //switch directions\n            let vertical = hits.includes(firstHit + 10);\n            let horizontal = hits.includes(firstHit + 1);\n\n            if (vertical) {\n              nextGuess = firstHit - 10;\n              guessDirection = \"Down\";\n            } else {\n              nextGuess = firstHit - 1;\n              guessDirection = \"Left\";\n            }\n          } else {\n            if (hitDirection === \"Up\") {} else if (hitDirection === \"Down\") {\n              guessDirection = \"Down\";\n              nextGuess = prevHit - 10;\n            } else if (hitDirection === \"Right\") {\n              let rem = prevHit % 10;\n\n              if (rem < 9 && pieces.canAttackPiece(prevHit + 1)) {\n                guessDirection = \"Right\";\n                nextGuess = prevHit + 1;\n              } else {\n                guessDirection = \"Left\";\n                nextGuess = firstHit - 1;\n              }\n            } else if (hitDirection === \"Left\") {\n              guessDirection = \"Left\";\n              nextGuess = prevHit - 1;\n            }\n          }\n        }\n      }\n\n      guesses.push(nextGuess);\n\n      if (pieces.canHitPiece(nextGuess)) {\n        hits.push(nextGuess);\n        hitDirection = guessDirection;\n      }\n\n      if (hits.length === 0) {\n        guesses = [];\n      }\n\n      let dex = pieces.attackPiece(nextGuess);\n      alert(this.getAlertText(dex, true));\n      this.checkIfWinner();\n\n      if (dex === 2) {\n        hits = [];\n        guesses = [];\n        hitDirection = \"\";\n      }\n\n      console.log(hits, guesses, hitDirection);\n      firstPlayer[\"pieces\"] = pieces;\n      this.setState({\n        firstPlayer\n      });\n      ai[\"hits\"] = hits;\n      ai[\"guesses\"] = guesses;\n      ai[\"hitDirection\"] = hitDirection;\n      this.setState({\n        ai\n      });\n      setTimeout(this.startUserTurn(), 1000);\n    };\n\n    this.getAlertText = (dex, isOpponenet) => {\n      if (dex === 0) {\n        return isOpponenet ? \"Your opponent missed!\" : \"You missed you fool!\";\n      }\n\n      if (dex === 1) {\n        return isOpponenet ? \"Your ship has been hit!\" : \"You hit their ship!\";\n      }\n\n      if (dex === 2) {\n        return isOpponenet ? \"Your ship has been sunk!\" : \"You sank their ship!\";\n      }\n    };\n\n    this.startUserTurn = () => {\n      this.setState({\n        showingBoard1: false\n      });\n      this.setState({\n        firstPlayerTurn: true\n      });\n    };\n\n    this.resetGame = () => {\n      let _this$state5 = this.state,\n          firstPlayer = _this$state5.firstPlayer,\n          secondPlayer = _this$state5.secondPlayer;\n      let pieces1 = firstPlayer.pieces;\n      pieces1.reset();\n      firstPlayer[\"pieces\"] = pieces1;\n      firstPlayer[\"won\"] = false;\n      firstPlayer[\"currentPiece\"] = 0;\n      this.setState({\n        firstPlayer\n      });\n      let pieces2 = secondPlayer.pieces;\n      pieces2.reset();\n      secondPlayer[\"pieces\"] = pieces2;\n      secondPlayer[\"won\"] = false;\n      this.setState({\n        secondPlayer\n      });\n      this.setState({\n        gameOver: false,\n        firstPlayerTurn: true,\n        gameStarted: false,\n        showingBoard1: true,\n        placingPiece: false\n      });\n    };\n\n    this.chooseCharacter = (isFirst, character) => {\n      let _this$state6 = this.state,\n          firstPlayer = _this$state6.firstPlayer,\n          secondPlayer = _this$state6.secondPlayer;\n\n      if (isFirst) {\n        firstPlayer[\"character\"] = character;\n        this.setState({\n          firstPlayer\n        });\n      } else {\n        secondPlayer[\"character\"] = character;\n        this.setState({\n          secondPlayer\n        });\n      }\n    };\n\n    this.placePiece = id => {\n      let firstPlayer = this.state.firstPlayer;\n      let pieces = firstPlayer.pieces;\n      let size = pieces.gamePieces[firstPlayer.currentPiece].size;\n      let spaces = [];\n\n      for (let i = 0; i < size; i++) {\n        let dex = id + 10 * i;\n\n        if (dex > 99) {\n          return;\n        }\n\n        spaces.push(dex);\n      }\n\n      if (pieces.canPlaceGamepiece(spaces)) {\n        pieces.addPiece(spaces, firstPlayer.currentPiece);\n        firstPlayer[\"pieces\"] = pieces;\n        this.setState({\n          hoverSquares: Array(100).fill(0)\n        });\n        this.setState({\n          firstPlayer\n        });\n        this.setState({\n          placingPiece: true\n        });\n      }\n    };\n\n    this.hoverOver = id => {\n      let _this$state7 = this.state,\n          firstPlayer = _this$state7.firstPlayer,\n          hoverSquares = _this$state7.hoverSquares;\n      let pieces = firstPlayer.pieces;\n      let size = pieces.gamePieces[firstPlayer.currentPiece].size;\n      let spaces = [];\n\n      for (let i = 0; i < size; i++) {\n        let dex = id + 10 * i;\n\n        if (dex > 99) {\n          return;\n        }\n\n        spaces.push(dex);\n      }\n\n      if (pieces.canPlaceGamepiece(spaces)) {\n        let h = hoverSquares;\n        h = Array(100).fill(0);\n\n        for (let i = 0; i < spaces.length; i++) {\n          h[spaces[i]] = 1;\n        }\n\n        this.setState({\n          hoverSquares: h\n        });\n      }\n    };\n\n    this.rotatePiece = () => {\n      let firstPlayer = this.state.firstPlayer;\n      let pieces = firstPlayer.pieces;\n      pieces.rotatePiece(firstPlayer.currentPiece);\n      firstPlayer[\"pieces\"] = pieces;\n      this.setState({\n        firstPlayer\n      });\n    };\n\n    this.confirmPlace = () => {\n      let firstPlayer = this.state.firstPlayer;\n      let pieces = firstPlayer.pieces;\n      pieces.setOriginalSquares();\n      firstPlayer[\"currentPiece\"] = firstPlayer.currentPiece + 1;\n      this.setState({\n        firstPlayer\n      });\n      this.setState({\n        placingPiece: false\n      });\n\n      if (firstPlayer.currentPiece >= pieces.gamePieces.length) {\n        this.createAIBoard();\n      }\n    };\n\n    this.createAIBoard = () => {\n      for (let i = 0; i < 5; i++) {\n        this.createAIPiece(i);\n      }\n\n      this.setState({\n        gameStarted: true\n      });\n      this.setState({\n        showingBoard1: false\n      });\n    };\n\n    this.createAIPiece = dex => {\n      let secondPlayer = this.state.secondPlayer;\n      let pieces = secondPlayer.pieces;\n      let size = pieces.gamePieces[dex].size;\n      let spaces = [];\n      let canPlace = true;\n      let id = Math.floor(Math.random() * 100);\n\n      for (let i = 0; i < size; i++) {\n        let dex = id + 10 * i;\n\n        if (dex > 99) {\n          canPlace = false;\n        }\n\n        spaces.push(dex);\n      }\n\n      if (!canPlace) {\n        this.createAIPiece(dex);\n      } else {\n        if (pieces.canPlaceGamepiece(spaces)) {\n          pieces.addPiece(spaces, dex);\n          let numRot = Math.floor(Math.random() * 3);\n\n          for (let i = 0; i < numRot; i++) {\n            pieces.rotatePiece(dex);\n          }\n\n          secondPlayer[\"pieces\"] = pieces;\n          this.setState({\n            secondPlayer\n          });\n        } else {\n          this.createAIPiece(dex);\n        }\n      }\n    };\n\n    this.playMusic = () => {\n      const musicPlaying = this.state.musicPlaying;\n      let isPlaying = musicPlaying;\n      isPlaying = !isPlaying;\n\n      if (isPlaying) {\n        audio.play();\n      } else {\n        audio.pause();\n      }\n\n      this.setState({\n        musicPlaying: isPlaying\n      });\n    };\n\n    this.changeBoard = () => {\n      let nuShowBoard = !this.state.showingBoard1;\n      this.setState({\n        showingBoard1: nuShowBoard\n      });\n    };\n\n    this.state = {\n      firstPlayer: {\n        pieces: playerPieces[0],\n        won: false,\n        character: characters[0],\n        wins: 0,\n        currentPiece: 0\n      },\n      secondPlayer: {\n        pieces: playerPieces[1],\n        won: false,\n        character: characters[1],\n        wins: 0\n      },\n      ai: {\n        guesses: [],\n        hits: [],\n        hitDirection: \"\"\n      },\n      hoverSquares: Array(100).fill(0),\n      showingBoard1: true,\n      placingPiece: false,\n      musicPlaying: false,\n      firstPlayerTurn: true,\n      gameOver: false,\n      gameStarted: false\n    };\n  }\n\n  componentDidMount() {\n    audio.play();\n    this.setState({\n      musicPlaying: true\n    });\n  }\n\n  render() {\n    let _this$state8 = this.state,\n        firstPlayer = _this$state8.firstPlayer,\n        secondPlayer = _this$state8.secondPlayer,\n        gameOver = _this$state8.gameOver,\n        musicPlaying = _this$state8.musicPlaying,\n        showingBoard1 = _this$state8.showingBoard1,\n        placingPiece = _this$state8.placingPiece,\n        gameStarted = _this$state8.gameStarted,\n        hoverSquares = _this$state8.hoverSquares;\n    console.log(window.innerWidth);\n    let grid = fillArray.map((square, i) => {\n      return React.createElement(Square, {\n        key: i.toString(),\n        id: i,\n        firstPlayer: firstPlayer.character,\n        secondPlayer: secondPlayer.character,\n        firstVal: firstPlayer.pieces.squares[i],\n        secondVal: secondPlayer.pieces.squares[i],\n        hoverVal: hoverSquares[i],\n        showingBoard1: showingBoard1,\n        gameStarted: gameStarted,\n        placingPiece: placingPiece,\n        hoverOver: this.hoverOver,\n        handleClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 528\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      className: \"backgroundStuff\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"glow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }, firstPlayer.won ? firstPlayer.character + \" Won\" : secondPlayer.won ? secondPlayer.character + \" Won\" : gameOver ? \"It's a Tie\" : \"BattleThrones\"), React.createElement(Dropdown, {\n      isFirst: true,\n      chooseCharacter: this.chooseCharacter,\n      currentCharacter: firstPlayer.character,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }), React.createElement(Dropdown, {\n      isFirst: false,\n      chooseCharacter: this.chooseCharacter,\n      currentCharacter: secondPlayer.character,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.resetGame,\n      className: \"resetButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, \"Reset\"), React.createElement(\"button\", {\n      onClick: this.playMusic,\n      className: \"resetButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }, musicPlaying ? \"Stop Music\" : \"Play Music\"), placingPiece ? React.createElement(\"button\", {\n      onClick: this.rotatePiece,\n      className: \"resetButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    }, \"Rotate\") : null, placingPiece ? React.createElement(\"button\", {\n      onClick: this.confirmPlace,\n      className: \"resetButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538\n      },\n      __self: this\n    }, \"Confirm\") : null, gameStarted ? React.createElement(\"button\", {\n      onClick: this.changeBoard,\n      className: \"resetButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539\n      },\n      __self: this\n    }, showingBoard1 ? \"Show Opponent's Board\" : \"Show Your Board\") : null, React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    }, grid), React.createElement(\"div\", {\n      className: \"characterGrid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"playerOne\",\n      src: this.getPicture(firstPlayer.character),\n      alt: blank,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"playerTwo\",\n      src: this.getPicture(secondPlayer.character),\n      alt: blank,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"nameGrid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548\n      },\n      __self: this\n    }, firstPlayer.character), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }, secondPlayer.character)), React.createElement(\"div\", {\n      className: \"playerGrid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552\n      },\n      __self: this\n    }, \"Player One\"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553\n      },\n      __self: this\n    }, \"Player Two\")), React.createElement(\"div\", {\n      className: \"winsGrid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    }, firstPlayer.wins), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557\n      },\n      __self: this\n    }, secondPlayer.wins)));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/ryzm/Desktop/Battleship/src/Board.js"],"names":["React","Component","Square","winningConditions","playerPieces","characters","Dropdown","blank","arya","bran","brienne","cersei","daenerys","davos","euron","greyWorm","hound","jamie","jonSnow","jorah","melisandre","missandei","nightKing","samwell","sansa","theon","tyrion","varys","theme","audio","Audio","fillArray","Array","fill","Board","constructor","props","getPicture","character","checkIfWinner","state","firstPlayer","secondPlayer","pieces","hasLost","secondWins","wins","alert","setState","gameOver","firstWins","handleClick","id","gameStarted","placingPiece","firstPlayerTurn","showingBoard1","placePiece","attackSquare","canAttackPiece","dex","attackPiece","getAlertText","setTimeout","startAITurn","aiTurn","getRandomGuess","squares","Math","floor","random","ai","hits","guesses","hitDirection","nextGuess","guessDirection","length","prevHit","prevPrevHit","diff","prevRemainder","firstHit","firstRem","canGuessUp","includes","canGuessDown","canGuessRight","canGuessLeft","prevGuess","vertical","horizontal","rem","push","canHitPiece","console","log","startUserTurn","isOpponenet","resetGame","pieces1","reset","pieces2","chooseCharacter","isFirst","size","gamePieces","currentPiece","spaces","i","canPlaceGamepiece","addPiece","hoverSquares","hoverOver","h","rotatePiece","confirmPlace","setOriginalSquares","createAIBoard","createAIPiece","canPlace","numRot","playMusic","musicPlaying","isPlaying","play","pause","changeBoard","nuShowBoard","won","componentDidMount","render","window","innerWidth","grid","map","square","toString"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Square from \"./Square.js\";\nimport winningConditions from './winningConditions.js';\nimport playerPieces from './playerPieces.js';\nimport characters from \"./characters.js\";\nimport './App.css';\nimport Dropdown from './Dropdown.js';\nimport blank from \"./blank.png\";\nimport arya from \"./faces/arya.png\";\nimport bran from \"./faces/bran.png\";\nimport brienne from \"./faces/brienne.png\";\nimport cersei from \"./faces/cersei.png\";\nimport daenerys from \"./faces/daenerys.png\";\nimport davos from \"./faces/davos.png\";\nimport euron from \"./faces/euron.png\";\nimport greyWorm from \"./faces/greyWorm.png\";\nimport hound from \"./faces/hound.png\";\nimport jamie from \"./faces/jamie.png\";\nimport jonSnow from \"./faces/jonSnow.png\";\nimport jorah from \"./faces/jorah.png\";\nimport melisandre from \"./faces/melisandre.png\";\nimport missandei from \"./faces/missandei.png\";\nimport nightKing from \"./faces/nightKing.png\";\nimport samwell from \"./faces/samwell.png\";\nimport sansa from \"./faces/sansa.png\";\nimport theon from \"./faces/theon.png\";\nimport tyrion from \"./faces/tyrion.png\";\nimport varys from \"./faces/varys.png\";\nimport theme from \"./theme.mp3\";\nconst audio  = new Audio(theme);\nconst fillArray = Array(100).fill(null);\n\nclass Board extends Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      firstPlayer : {\n        pieces: playerPieces[0],\n        won : false,\n        character: characters[0],\n        wins: 0,\n        currentPiece: 0\n      },\n      secondPlayer : {\n        pieces: playerPieces[1],\n        won : false,\n        character: characters[1],\n        wins: 0\n      },\n      ai: {\n        guesses: [],\n        hits: [],\n        hitDirection: \"\"\n      },\n      hoverSquares: Array(100).fill(0),\n      showingBoard1: true,\n      placingPiece: false,\n      musicPlaying: false,\n      firstPlayerTurn : true,\n      gameOver: false,\n      gameStarted: false\n    }\n  }\n\n  getPicture = (character) => {\n    switch(character){\n      case \"Arya Stark\":\n        return arya;\n      case \"Bran Stark\":\n        return bran;\n      case \"Brienne of Tarth\":\n        return brienne;\n      case \"Cersei Lannister\":\n        return cersei;\n      case \"Daenerys Targaryean\":\n        return daenerys;\n      case \"Davos Seaworth\":\n        return davos;\n      case \"Euron Greyjoy\":\n        return euron;\n      case \"Grey Worm\":\n        return greyWorm;\n      case \"The Hound\":\n        return hound;\n      case \"Jamie Lannister\":\n        return jamie;\n      case \"Jon Snow\":\n        return jonSnow;\n      case \"Jorah Mormont\":\n        return jorah;\n      case \"Melisandre\":\n        return melisandre;\n      case \"Missandei\":\n        return missandei;\n      case \"Night King\":\n        return nightKing;\n      case \"Samwell Tarly\":\n        return samwell;\n      case \"Sansa Stark\":\n        return sansa;\n      case \"Theon Greyjoy\":\n        return theon;\n      case \"Tyrion Lannister\":\n        return tyrion;\n      case \"Varys\":\n        return varys;\n    }\n    return jonSnow;\n  }\n\n  checkIfWinner = () =>{\n    let {firstPlayer, secondPlayer} = this.state;\n    if(firstPlayer.pieces.hasLost()){\n      let secondWins = secondPlayer.wins + 1;\n      alert(\"You lost!\")\n      secondPlayer[\"wins\"] = secondWins;\n      secondPlayer[\"won\"] = true;\n      this.setState({secondPlayer});\n      this.setState({gameOver: true});\n    }\n    else if(secondPlayer.pieces.hasLost()){\n      let firstWins = firstPlayer.wins + 1;\n      alert(\"You won!\")\n      firstPlayer[\"wins\"] = firstWins;\n      firstPlayer[\"won\"] = true;\n      this.setState({firstPlayer});\n      this.setState({gameOver: true});\n    }\n  }\n\n  handleClick = (id) => {\n    let {gameStarted, placingPiece, firstPlayerTurn, gameOver, showingBoard1} = this.state;\n    if(gameOver){\n      return;\n    }\n    if(!gameStarted){\n      if(!placingPiece){\n        this.placePiece(id)\n      }\n    }\n    else {\n      if(firstPlayerTurn && !showingBoard1){\n        this.attackSquare(id);\n      }\n    }\n  }\n\n  attackSquare = (id) => {\n    let {firstPlayerTurn, secondPlayer, gameOver} = this.state;\n    if(firstPlayerTurn){\n      let pieces = secondPlayer.pieces;\n      if(pieces.canAttackPiece(id)){\n        let dex = pieces.attackPiece(id);\n        alert(this.getAlertText(dex, false));\n        this.checkIfWinner();\n        secondPlayer[\"pieces\"] = pieces;\n        this.setState({secondPlayer})\n        this.setState({firstPlayerTurn: false})\n        if(!gameOver){\n          setTimeout(this.startAITurn(), 3000)\n        }\n      }\n    }\n  }\n\n  startAITurn = () => {\n    this.setState({showingBoard1: true})\n    this.aiTurn();\n  }\n\n  getRandomGuess = () => {\n    let {firstPlayer} = this.state;\n    let squares = firstPlayer.pieces.squares;\n    let id = Math.floor(Math.random() * 100);\n    if(squares[id] <= 1){\n      return id;\n    }\n    return this.getRandomGuess();\n  }\n\n  aiTurn = () => {\n    const {ai,firstPlayer} = this.state;\n    let pieces = firstPlayer.pieces;\n    let hits = ai.hits;\n    let guesses = ai.guesses;\n    let hitDirection = ai.hitDirection;\n    let nextGuess = 0;\n    let guessDirection = \"\";\n\n    if(hits.length === 0) {\n      nextGuess = this.getRandomGuess();\n    }\n    else if(hits.length === guesses.length) {\n      let prevHit = hits[hits.length - 1];\n      if(hits.length === 1){\n        nextGuess = prevHit + 10;\n        if(prevHit < 90 && pieces.canAttackPiece(nextGuess)){\n          guessDirection = \"Up\";\n        }\n        else {\n          nextGuess = prevHit - 10;\n          guessDirection = \"Down\";\n        }\n      }\n      else {\n        let prevPrevHit = hits[hits.length - 2];\n        let diff = prevHit - prevPrevHit;\n        if(diff === 10){\n          nextGuess = prevHit + 10;\n          if(prevHit < 90 && pieces.canAttackPiece(nextGuess)){\n            guessDirection = \"Up\";\n          }\n          else{\n            nextGuess = hits[0] - 10;\n            guessDirection = \"Down\";\n          }\n        }\n        else if(diff === -10){\n          nextGuess = prevHit - 10;\n          if(prevHit > 9 && pieces.canAttackPiece(nextGuess)){\n            guessDirection = \"Down\";\n          }\n          else{\n            nextGuess = hits[0] + 10;\n            guessDirection = \"Up\";\n          }\n        }\n        else if(diff === 1){\n          let prevRemainder = prevHit % 10;\n          nextGuess = prevHit + 1;\n          if(prevRemainder != 9 && pieces.canAttackPiece(nextGuess)){\n            guessDirection = \"Right\";\n          }\n          else {\n            nextGuess = hits[0] - 1;\n            guessDirection = \"Left\";\n          }\n        }\n        else if(diff === -1){\n          let prevRemainder = prevHit % 10;\n          nextGuess = prevHit - 1;\n          if(prevRemainder != 0 && pieces.canAttackPiece(nextGuess)){\n            guessDirection = \"Left\";\n          }\n          else{\n            nextGuess = hits[0] + 1;\n            guessDirection = \"Right\";\n          }\n        }\n      }\n    }\n    else {\n      if(hits.length === 1){\n        let firstHit = hits[0];\n        let firstRem = firstHit % 10;\n        let canGuessUp = !hits.includes(firstHit + 10) && firstHit < 90 && pieces.canAttackPiece(firstHit + 10);\n        let canGuessDown = !hits.includes(firstHit - 10) && firstHit > 9 && pieces.canAttackPiece(firstHit - 10);\n        let canGuessRight = !hits.includes(firstHit + 1) && firstRem < 9 && pieces.canAttackPiece(firstHit + 1);\n        let canGuessLeft = !hits.includes(firstHit - 1) && firstRem > 0 && pieces.canAttackPiece(firstHit - 1);\n        if(canGuessUp){\n          nextGuess = firstHit + 10;\n          guessDirection = \"Up\";\n        }\n        else if(canGuessDown){\n          nextGuess = firstHit - 10;\n          guessDirection = \"Down\";\n        }\n        else if(canGuessRight){\n          nextGuess = firstHit + 1;\n          guessDirection = \"Right\";\n        }\n        else if(canGuessLeft){\n          nextGuess = firstHit - 1;\n          guessDirection = \"Left\";\n        }\n      }\n      else{\n        let prevHit = hits[hits.length - 1];\n        let prevPrevHit = hits[hits.length - 2];\n        let firstHit = hits[0];\n        let prevGuess = guesses[guesses.length - 1];\n        if(prevHit != prevGuess){\n          //switch directions\n          let vertical = hits.includes(firstHit + 10);\n          let horizontal = hits.includes(firstHit + 1);\n          if(vertical){\n            nextGuess = firstHit - 10;\n            guessDirection = \"Down\";\n          }\n          else{\n            nextGuess = firstHit - 1;\n            guessDirection = \"Left\";\n          }\n        }\n        else{\n          if(hitDirection === \"Up\"){\n\n          }\n          else if(hitDirection === \"Down\"){\n            guessDirection = \"Down\";\n            nextGuess = prevHit - 10;\n          }\n          else if(hitDirection === \"Right\"){\n            let rem = prevHit % 10;\n            if(rem < 9 && pieces.canAttackPiece(prevHit + 1)){\n              guessDirection = \"Right\";\n              nextGuess = prevHit + 1;\n            }\n            else{\n              guessDirection = \"Left\";\n              nextGuess = firstHit - 1;\n            }\n          }\n          else if(hitDirection === \"Left\"){\n            guessDirection = \"Left\";\n            nextGuess = prevHit - 1;\n          }\n        }\n      }\n    }\n    guesses.push(nextGuess);\n\n    if(pieces.canHitPiece(nextGuess)){\n      hits.push(nextGuess);\n      hitDirection = guessDirection;\n    }\n    if(hits.length === 0){\n      guesses = [];\n    }\n    let dex = pieces.attackPiece(nextGuess)\n    alert(this.getAlertText(dex, true));\n    this.checkIfWinner();\n    if(dex === 2){\n      hits = [];\n      guesses = [];\n      hitDirection = \"\";\n    }\n\n    console.log(hits,guesses,hitDirection);\n    firstPlayer[\"pieces\"] = pieces;\n    this.setState({firstPlayer})\n\n    ai[\"hits\"] = hits;\n    ai[\"guesses\"] = guesses;\n    ai[\"hitDirection\"] = hitDirection;\n    this.setState({ai});\n    setTimeout(this.startUserTurn(), 1000)\n  }\n\n  getAlertText = (dex, isOpponenet) => {\n    if(dex === 0){\n      return isOpponenet ? \"Your opponent missed!\" : \"You missed you fool!\";\n    }\n    if(dex === 1){\n      return isOpponenet ? \"Your ship has been hit!\" : \"You hit their ship!\";\n    }\n    if(dex === 2){\n      return isOpponenet ? \"Your ship has been sunk!\" : \"You sank their ship!\";\n    }\n  }\n\n  startUserTurn = () => {\n    this.setState({showingBoard1: false})\n    this.setState({firstPlayerTurn: true})\n  }\n\n  resetGame = () => {\n    let {firstPlayer, secondPlayer} = this.state;\n    let pieces1 = firstPlayer.pieces;\n    pieces1.reset();\n    firstPlayer[\"pieces\"] = pieces1;\n    firstPlayer[\"won\"] = false;\n    firstPlayer[\"currentPiece\"] = 0;\n    this.setState({firstPlayer});\n    let pieces2 = secondPlayer.pieces;\n    pieces2.reset();\n    secondPlayer[\"pieces\"] = pieces2;\n    secondPlayer[\"won\"] = false;\n    this.setState({secondPlayer});\n    this.setState({gameOver : false, firstPlayerTurn : true, gameStarted : false, showingBoard1: true, placingPiece: false});\n  }\n\n  chooseCharacter = (isFirst, character) =>{\n    let {firstPlayer,secondPlayer} = this.state\n    if(isFirst){\n      firstPlayer[\"character\"] = character;\n      this.setState({firstPlayer});\n    }\n    else{\n      secondPlayer[\"character\"] = character;\n      this.setState({secondPlayer});\n    }\n  }\n\n  placePiece = (id) => {\n    let {firstPlayer} = this.state;\n    let pieces = firstPlayer.pieces;\n    let size = pieces.gamePieces[firstPlayer.currentPiece].size;\n    let spaces = [];\n    for(let i = 0; i < size; i++){\n      let dex = id + 10 * i\n      if(dex > 99){\n        return;\n      }\n      spaces.push(dex)\n    }\n    if(pieces.canPlaceGamepiece(spaces)){\n      pieces.addPiece(spaces, firstPlayer.currentPiece)\n      firstPlayer[\"pieces\"] = pieces;\n      this.setState({hoverSquares: Array(100).fill(0)})\n      this.setState({firstPlayer})\n      this.setState({placingPiece: true})\n    }\n  }\n\n  hoverOver = (id) => {\n    let {firstPlayer, hoverSquares} = this.state;\n    let pieces = firstPlayer.pieces;\n    let size = pieces.gamePieces[firstPlayer.currentPiece].size;\n    let spaces = [];\n    for(let i = 0; i < size; i++){\n      let dex = id + 10 * i\n      if(dex > 99){\n        return;\n      }\n      spaces.push(dex)\n    }\n    if(pieces.canPlaceGamepiece(spaces)){\n      let h = hoverSquares;\n      h = Array(100).fill(0);\n      for(let i = 0; i < spaces.length; i++){\n        h[spaces[i]] = 1;\n      }\n      this.setState({hoverSquares: h});\n    }\n  }\n\n  rotatePiece = () =>{\n    let {firstPlayer} = this.state;\n    let pieces = firstPlayer.pieces;\n    pieces.rotatePiece(firstPlayer.currentPiece);\n    firstPlayer[\"pieces\"] = pieces;\n    this.setState({firstPlayer});\n  }\n\n  confirmPlace = () => {\n    let {firstPlayer} = this.state;\n    let pieces = firstPlayer.pieces;\n    pieces.setOriginalSquares();\n    firstPlayer[\"currentPiece\"] = firstPlayer.currentPiece + 1;\n    this.setState({firstPlayer});\n    this.setState({placingPiece: false});\n    if(firstPlayer.currentPiece >= pieces.gamePieces.length){\n      this.createAIBoard();\n    }\n  }\n\n  createAIBoard = () => {\n    for(let i = 0; i < 5; i++){\n      this.createAIPiece(i);\n    }\n    this.setState({gameStarted: true})\n    this.setState({showingBoard1: false})\n  }\n\n  createAIPiece = (dex) => {\n    let {secondPlayer} = this.state;\n    let pieces = secondPlayer.pieces;\n    let size = pieces.gamePieces[dex].size;\n    let spaces = [];\n    let canPlace = true;\n    let id = Math.floor(Math.random() * 100)\n    for(let i = 0; i < size; i++){\n      let dex = id + 10 * i\n      if(dex > 99){\n        canPlace = false;\n      }\n      spaces.push(dex)\n    }\n    if(!canPlace){\n      this.createAIPiece(dex);\n    }\n    else {\n      if(pieces.canPlaceGamepiece(spaces)){\n        pieces.addPiece(spaces, dex)\n        let numRot = Math.floor(Math.random() * 3)\n        for(let i = 0; i < numRot; i++){\n          pieces.rotatePiece(dex);\n        }\n        secondPlayer[\"pieces\"] = pieces;\n        this.setState({secondPlayer})\n      }\n      else{\n        this.createAIPiece(dex);\n      }\n    }\n  }\n\n  componentDidMount(){\n    audio.play();\n    this.setState({musicPlaying:true});\n  }\n\n  playMusic = () =>{\n    const{musicPlaying} = this.state;\n    let isPlaying = musicPlaying;\n    isPlaying = !isPlaying;\n    if(isPlaying){\n      audio.play();\n    }\n    else{\n      audio.pause();\n    }\n    this.setState({musicPlaying:isPlaying});\n  }\n\n  changeBoard = () => {\n    let nuShowBoard = !this.state.showingBoard1;\n    this.setState({showingBoard1: nuShowBoard});\n  }\n\n  render(){\n    let {firstPlayer, secondPlayer, gameOver, musicPlaying, showingBoard1, placingPiece, gameStarted, hoverSquares} = this.state;\n    console.log(window.innerWidth);\n    let grid = fillArray.map((square,i) =>{\n      return(\n        <Square key = {i.toString()} id = {i} firstPlayer = {firstPlayer.character} secondPlayer = {secondPlayer.character} firstVal = {firstPlayer.pieces.squares[i]} secondVal = {secondPlayer.pieces.squares[i]} hoverVal = {hoverSquares[i]} showingBoard1 = {showingBoard1} gameStarted = {gameStarted} placingPiece = {placingPiece} hoverOver = {this.hoverOver} handleClick = {this.handleClick}  />)\n    })\n    return (\n      <div className = \"backgroundStuff\">\n        <h1 className = \"glow\">{firstPlayer.won ? firstPlayer.character + \" Won\" : secondPlayer.won ? secondPlayer.character + \" Won\" : gameOver ? \"It's a Tie\" : \"BattleThrones\"}</h1>\n        <Dropdown isFirst = {true} chooseCharacter = {this.chooseCharacter} currentCharacter = {firstPlayer.character}/>\n        <Dropdown isFirst = {false} chooseCharacter = {this.chooseCharacter} currentCharacter = {secondPlayer.character}/>\n        <button onClick = {this.resetGame} className = \"resetButton\">Reset</button>\n        <button onClick = {this.playMusic} className = \"resetButton\">{musicPlaying ? \"Stop Music\": \"Play Music\"}</button>\n        {placingPiece ? (<button onClick = {this.rotatePiece} className = \"resetButton\">Rotate</button>): (null)}\n        {placingPiece ? (<button onClick = {this.confirmPlace} className = \"resetButton\">Confirm</button>): (null)}\n        {gameStarted ? (<button onClick = {this.changeBoard} className = \"resetButton\">{showingBoard1 ? \"Show Opponent's Board\" : \"Show Your Board\"}</button>): (null)}\n        <div className = \"grid\">\n          {grid}\n        </div>\n        <div className = \"characterGrid\">\n          <img className = \"playerOne\" src =  {this.getPicture(firstPlayer.character)} alt = {blank}></img>\n          <img className = \"playerTwo\" src =  {this.getPicture(secondPlayer.character)} alt = {blank}></img>\n        </div>\n        <div className = \"nameGrid\">\n          <h1>{firstPlayer.character}</h1>\n          <h1>{secondPlayer.character}</h1>\n        </div>\n        <div className = \"playerGrid\">\n          <h1>Player One</h1>\n          <h1>Player Two</h1>\n        </div>\n        <div className = \"winsGrid\">\n          <h1>{firstPlayer.wins}</h1>\n          <h1>{secondPlayer.wins}</h1>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}