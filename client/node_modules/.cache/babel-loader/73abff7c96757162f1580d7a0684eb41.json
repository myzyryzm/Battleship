{"ast":null,"code":"class Piece {\n  constructor(size) {\n    this.size = size;\n    this.positions = [];\n    this.hits = [];\n    this.sunk = false;\n    this.rotation = 0;\n  }\n\n  hasSunkPiece(dex) {\n    this.hits.push(dex);\n    this.sunk = this.hits.length === this.positions.length;\n    return this.sunk;\n  }\n\n  rotatePiece(spaces) {\n    let rot = this.rotation;\n    let finPos = [];\n    let anchorPoint = rot === 0 || rot === 270 ? Math.min(...this.positions) : Math.max(...this.positions);\n    let anchorRemainder = anchorPoint > 9 ? anchorPoint - anchorPoint % 10 : 0;\n    let nuRot = false;\n\n    for (let i = 0; i < 4; i++) {\n      rot += 90;\n      rot = rot < 360 ? rot : 0;\n      let canRotate = true;\n      finPos = [anchorPoint];\n\n      for (let j = 1; j < this.size; j++) {\n        if (rot === 0) {\n          let dex = anchorPoint + 10 * j;\n          finPos[j] = dex;\n\n          if (dex > 99) {\n            canRotate = false;\n            break;\n          }\n        } else if (rot === 90) {\n          let dex = anchorPoint - j;\n          let rem = dex > 9 ? dex - dex % 10 : 0;\n          finPos[j] = dex;\n\n          if (dex < 0 || rem != anchorRemainder) {\n            canRotate = false;\n            break;\n          }\n        } else if (rot === 180) {\n          let dex = anchorPoint - 10 * j;\n          finPos[j] = dex;\n\n          if (dex < 0) {\n            canRotate = false;\n            break;\n          }\n        } else if (rot === 270) {\n          let dex = anchorPoint + j;\n          let rem = dex > 9 ? dex - dex % 10 : 0;\n          finPos[j] = dex;\n\n          if (dex > 99 || rem != anchorRemainder) {\n            canRotate = false;\n            break;\n          }\n        }\n      }\n\n      if (canRotate) {\n        nuRot = true;\n\n        for (let k = 0; k < finPos.length; k++) {\n          if (spaces.includes(finPos[k])) {\n            nuRot = false;\n            break;\n          }\n        }\n\n        if (nuRot) {\n          break;\n        }\n      }\n    }\n\n    if (nuRot) {\n      this.positions = finPos;\n      this.rotation = rot;\n    }\n  }\n\n}\n\nclass PlayerPieces {\n  constructor() {\n    this.gamePieces = [new Piece(2), new Piece(3), new Piece(3), new Piece(4), new Piece(5)];\n    this.squares = Array(100).fill(0);\n    this.originalSquares = Array(100).fill(0);\n  }\n\n  setOriginalSquares() {\n    this.originalSquares = this.squares;\n  }\n\n  reset() {\n    this.gamePieces = [new Piece(2), new Piece(3), new Piece(3), new Piece(4), new Piece(5)];\n    this.squares = Array(100).fill(0);\n  }\n\n  hasLost() {\n    let lost = true;\n\n    for (let i = 0; i < this.gamePieces.length; i++) {\n      if (!this.gamePieces[i].sunk) {\n        lost = false;\n        break;\n      }\n    }\n\n    return lost;\n  }\n\n  canPlaceGamepiece(arr) {\n    let canPlace = true;\n\n    for (let i = 0; i < arr.length; i++) {\n      if (this.squares[arr[i]] === 1) {\n        canPlace = false;\n        break;\n      }\n    }\n\n    return canPlace;\n  }\n\n  addPiece(spaces, dex) {\n    for (let i = 0; i < spaces.length; i++) {\n      this.squares[spaces[i]] = 1;\n    }\n\n    this.gamePieces[dex].positions = spaces;\n  }\n\n  canAttackPiece(dex) {\n    return this.squares[dex] <= 1;\n  }\n\n  attackPiece(dex) {\n    let hasSunk = false;\n    let num = 0;\n\n    if (this.squares[dex] === 1) {\n      for (let i = 0; i < this.gamePieces.length; i++) {\n        if (this.gamePieces[i].positions.includes(dex)) {\n          hasSunk = this.gamePieces[i].hasSunkPiece(dex);\n          break;\n        }\n      }\n\n      if (hasSunk) {\n        num = 2;\n      } else {\n        num = 1;\n      }\n    } else {\n      num = 0;\n    }\n\n    this.squares[dex] += 2;\n    return num;\n  }\n\n  canHitPiece(dex) {\n    return this.squares[dex] === 1;\n  }\n\n  aiAttackPiece(dex) {\n    let hit = false;\n    let hasSunk = false;\n\n    if (this.squares[dex] === 1) {\n      hit = true;\n\n      for (let i = 0; i < this.gamePieces.length; i++) {\n        if (this.gamePieces[i].positions.includes(dex)) {\n          hasSunk = this.gamePieces[i].hasSunkPiece(dex);\n          break;\n        }\n      }\n    }\n\n    this.squares[dex] += 2;\n    return hit;\n  }\n\n  rotatePiece(dex) {\n    let initSpaces = this.gamePieces[dex].positions;\n    let occupiedSpaces = [];\n\n    for (let i = 0; i < this.gamePieces.length; i++) {\n      if (i != dex) {\n        for (let j = 0; j < this.gamePieces[i].positions.length; j++) {\n          occupiedSpaces.push(this.gamePieces[i].positions[j]);\n        }\n      }\n    }\n\n    this.gamePieces[dex].rotatePiece(occupiedSpaces);\n    let nuSpaces = this.gamePieces[dex].positions;\n\n    for (let i = 0; i < initSpaces.length; i++) {\n      this.squares[initSpaces[i]] = 0;\n      this.squares[nuSpaces[i]] = 1;\n    }\n  }\n\n}\n\nlet user = new PlayerPieces();\nlet opponent = new PlayerPieces();\nexport default [user, opponent];","map":{"version":3,"sources":["/Users/ryzm/Desktop/Battleship/src/playerPieces.js"],"names":["Piece","constructor","size","positions","hits","sunk","rotation","hasSunkPiece","dex","push","length","rotatePiece","spaces","rot","finPos","anchorPoint","Math","min","max","anchorRemainder","nuRot","i","canRotate","j","rem","k","includes","PlayerPieces","gamePieces","squares","Array","fill","originalSquares","setOriginalSquares","reset","hasLost","lost","canPlaceGamepiece","arr","canPlace","addPiece","canAttackPiece","attackPiece","hasSunk","num","canHitPiece","aiAttackPiece","hit","initSpaces","occupiedSpaces","nuSpaces","user","opponent"],"mappings":"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","sourcesContent":["class Piece{\n  constructor(size){\n    this.size = size;\n    this.positions = [];\n    this.hits = [];\n    this.sunk = false;\n    this.rotation = 0;\n  }\n\n  hasSunkPiece(dex){\n    this.hits.push(dex);\n    this.sunk = this.hits.length === this.positions.length\n    return this.sunk;\n  }\n\n  rotatePiece(spaces){\n    let rot = this.rotation;\n    let finPos = [];\n    let anchorPoint = rot === 0 || rot === 270 ? Math.min(...this.positions) : Math.max(...this.positions);\n    let anchorRemainder = anchorPoint > 9 ? anchorPoint - anchorPoint % 10 : 0;\n    let nuRot = false;\n\n    for(let i = 0; i < 4; i++){\n      rot += 90;\n      rot = rot < 360 ? rot : 0;\n      let canRotate = true;\n      finPos = [anchorPoint];\n      for(let j = 1; j < this.size; j++){\n        if(rot === 0){\n          let dex = anchorPoint + 10 * j\n          finPos[j] = dex\n          if(dex > 99){\n            canRotate = false;\n            break;\n          }\n        }\n        else if(rot === 90){\n          let dex = anchorPoint - j\n          let rem = dex > 9 ? dex - dex % 10 : 0;\n          finPos[j] = dex\n          if(dex < 0 || rem != anchorRemainder){\n            canRotate = false;\n            break;\n          }\n        }\n        else if(rot === 180){\n          let dex = anchorPoint - 10 * j\n          finPos[j] = dex\n          if(dex < 0){\n            canRotate = false;\n            break;\n          }\n        }\n        else if(rot === 270){\n          let dex = anchorPoint + j\n          let rem = dex > 9 ? dex - dex % 10 : 0;\n          finPos[j] = dex\n          if(dex > 99 || rem != anchorRemainder){\n            canRotate = false;\n            break;\n          }\n        }\n      }\n      if(canRotate){\n        nuRot = true;\n        for(let k = 0; k < finPos.length; k++){\n          if(spaces.includes(finPos[k])){\n            nuRot = false;\n            break;\n          }\n        }\n        if(nuRot){\n          break;\n        }\n      }\n    }\n    if(nuRot){\n      this.positions = finPos;\n      this.rotation = rot;\n    }\n  }\n}\n\nclass PlayerPieces{\n  constructor(){\n    this.gamePieces = [new Piece(2), new Piece(3), new Piece(3), new Piece(4), new Piece(5)];\n    this.squares = Array(100).fill(0);\n    this.originalSquares = Array(100).fill(0);\n  }\n\n  setOriginalSquares(){\n    this.originalSquares = this.squares;\n  }\n\n  reset(){\n    this.gamePieces = [new Piece(2), new Piece(3), new Piece(3), new Piece(4), new Piece(5)];\n    this.squares = Array(100).fill(0);\n  }\n\n  hasLost(){\n    let lost = true;\n    for(let i = 0; i < this.gamePieces.length; i++){\n      if(!this.gamePieces[i].sunk){\n        lost = false;\n        break;\n      }\n    }\n    return lost;\n  }\n\n  canPlaceGamepiece(arr){\n    let canPlace = true;\n    for(let i = 0; i < arr.length; i++){\n      if(this.squares[arr[i]] === 1){\n        canPlace = false;\n        break;\n      }\n    }\n    return canPlace;\n  }\n\n  addPiece(spaces, dex){\n    for(let i = 0; i < spaces.length; i++){\n      this.squares[spaces[i]] = 1;\n    }\n    this.gamePieces[dex].positions = spaces\n  }\n\n  canAttackPiece(dex){\n    return this.squares[dex]<= 1;\n  }\n\n  attackPiece(dex){\n    let hasSunk = false;\n    let num = 0;\n    if(this.squares[dex] === 1){\n      for(let i = 0; i < this.gamePieces.length; i++){\n        if(this.gamePieces[i].positions.includes(dex)){\n          hasSunk = this.gamePieces[i].hasSunkPiece(dex);\n          break;\n        }\n      }\n      if(hasSunk){\n        num = 2;\n      }\n      else{\n        num = 1;\n      }\n    } else {\n      num = 0;\n    }\n    this.squares[dex]+=2;\n    return num;\n  }\n\n  canHitPiece(dex){\n    return this.squares[dex]=== 1;\n  }\n\n  aiAttackPiece(dex){\n    let hit = false;\n    let hasSunk = false;\n    if(this.squares[dex] === 1){\n      hit = true;\n      for(let i = 0; i < this.gamePieces.length; i++){\n        if(this.gamePieces[i].positions.includes(dex)){\n          hasSunk = this.gamePieces[i].hasSunkPiece(dex);\n          break;\n        }\n      }\n    }\n    this.squares[dex]+=2;\n    return hit;\n  }\n\n  rotatePiece(dex){\n    let initSpaces = this.gamePieces[dex].positions;\n    let occupiedSpaces = [];\n    for(let i = 0; i < this.gamePieces.length; i++){\n      if(i != dex){\n        for(let j = 0; j < this.gamePieces[i].positions.length; j++){\n          occupiedSpaces.push(this.gamePieces[i].positions[j]);\n        }\n      }\n    }\n    this.gamePieces[dex].rotatePiece(occupiedSpaces);\n    let nuSpaces = this.gamePieces[dex].positions;\n    for(let i = 0; i < initSpaces.length; i++){\n      this.squares[initSpaces[i]] = 0;\n      this.squares[nuSpaces[i]] = 1;\n    }\n  }\n}\n\nlet user = new PlayerPieces()\nlet opponent = new PlayerPieces()\n\nexport default [user,opponent];\n"]},"metadata":{},"sourceType":"module"}