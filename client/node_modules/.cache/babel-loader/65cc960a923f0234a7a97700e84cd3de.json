{"ast":null,"code":"var _jsxFileName = \"/Users/ryzm/Desktop/Battleship/src/Board.js\";\nimport React, { Component } from 'react';\nimport Square from \"./Square.js\";\nimport winningConditions from './winningConditions.js';\nimport playerPieces from './playerPieces.js';\nimport characters from \"./characters.js\";\nimport './App.css';\nimport Dropdown from './Dropdown.js';\nimport blank from \"./blank.png\";\nimport arya from \"./faces/arya.png\";\nimport bran from \"./faces/bran.png\";\nimport brienne from \"./faces/brienne.png\";\nimport cersei from \"./faces/cersei.png\";\nimport daenerys from \"./faces/daenerys.png\";\nimport davos from \"./faces/davos.png\";\nimport euron from \"./faces/euron.png\";\nimport greyWorm from \"./faces/greyWorm.png\";\nimport hound from \"./faces/hound.png\";\nimport jamie from \"./faces/jamie.png\";\nimport jonSnow from \"./faces/jonSnow.png\";\nimport jorah from \"./faces/jorah.png\";\nimport melisandre from \"./faces/melisandre.png\";\nimport missandei from \"./faces/missandei.png\";\nimport nightKing from \"./faces/nightKing.png\";\nimport samwell from \"./faces/samwell.png\";\nimport sansa from \"./faces/sansa.png\";\nimport theon from \"./faces/theon.png\";\nimport tyrion from \"./faces/tyrion.png\";\nimport varys from \"./faces/varys.png\";\nimport theme from \"./theme.mp3\";\nconst audio = new Audio(theme);\nconst fillArray = Array(100).fill(null);\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getPicture = character => {\n      switch (character) {\n        case \"Arya Stark\":\n          return arya;\n\n        case \"Bran Stark\":\n          return bran;\n\n        case \"Brienne of Tarth\":\n          return brienne;\n\n        case \"Cersei Lannister\":\n          return cersei;\n\n        case \"Daenerys Targaryean\":\n          return daenerys;\n\n        case \"Davos Seaworth\":\n          return davos;\n\n        case \"Euron Greyjoy\":\n          return euron;\n\n        case \"Grey Worm\":\n          return greyWorm;\n\n        case \"The Hound\":\n          return hound;\n\n        case \"Jamie Lannister\":\n          return jamie;\n\n        case \"Jon Snow\":\n          return jonSnow;\n\n        case \"Jorah Mormont\":\n          return jorah;\n\n        case \"Melisandre\":\n          return melisandre;\n\n        case \"Missandei\":\n          return missandei;\n\n        case \"Night King\":\n          return nightKing;\n\n        case \"Samwell Tarly\":\n          return samwell;\n\n        case \"Sansa Stark\":\n          return sansa;\n\n        case \"Theon Greyjoy\":\n          return theon;\n\n        case \"Tyrion Lannister\":\n          return tyrion;\n\n        case \"Varys\":\n          return varys;\n      }\n\n      return jonSnow;\n    };\n\n    this.checkIfWinner = () => {\n      let _this$state = this.state,\n          firstPlayer = _this$state.firstPlayer,\n          secondPlayer = _this$state.secondPlayer;\n\n      if (firstPlayer.pieces.hasLost) {\n        let secondWins = this.setState({\n          gameOver: true\n        });\n      }\n    };\n\n    this.handleClick = id => {\n      let _this$state2 = this.state,\n          gameStarted = _this$state2.gameStarted,\n          placingPiece = _this$state2.placingPiece,\n          firstPlayerTurn = _this$state2.firstPlayerTurn,\n          gameOver = _this$state2.gameOver,\n          showingBoard1 = _this$state2.showingBoard1;\n\n      if (gameOver) {\n        return;\n      }\n\n      if (!gameStarted) {\n        if (!placingPiece) {\n          this.placePiece(id);\n        }\n      } else {\n        if (firstPlayerTurn && !showingBoard1) {\n          this.attackSquare(id);\n        }\n      }\n    };\n\n    this.attackSquare = id => {\n      let _this$state3 = this.state,\n          firstPlayerTurn = _this$state3.firstPlayerTurn,\n          secondPlayer = _this$state3.secondPlayer;\n\n      if (firstPlayerTurn) {\n        let pieces = secondPlayer.pieces;\n\n        if (pieces.canAttackPiece(id)) {\n          let dex = pieces.attackPiece(id);\n          alert(this.getAlertText(dex, false));\n          secondPlayer[\"pieces\"] = pieces;\n          this.setState({\n            secondPlayer\n          });\n          this.setState({\n            firstPlayerTurn: false\n          });\n          setTimeout(this.startAITurn(), 3000);\n        }\n      }\n    };\n\n    this.startAITurn = () => {\n      this.setState({\n        showingBoard1: true\n      });\n      this.aiTurn();\n    };\n\n    this.getRandomGuess = () => {\n      let firstPlayer = this.state.firstPlayer;\n      let squares = firstPlayer.pieces.squares;\n      let id = Math.floor(Math.random() * 100);\n\n      if (squares[id] <= 1) {\n        return id;\n      }\n\n      return this.getRandomGuess();\n    };\n\n    this.aiTurn = () => {\n      const _this$state4 = this.state,\n            ai = _this$state4.ai,\n            firstPlayer = _this$state4.firstPlayer;\n      let pieces = firstPlayer.pieces;\n      let hits = ai.hits;\n      let guesses = ai.guesses;\n      let hitDirection = ai.hitDirection;\n      let nextGuess = 0;\n      let guessDirection = \"\";\n\n      if (hits.length === 0) {\n        nextGuess = this.getRandomGuess();\n      } else if (hits.length === guesses.length) {\n        let prevHit = hits[hits.length - 1];\n\n        if (hits.length === 1) {\n          nextGuess = prevHit + 10;\n\n          if (prevHit < 90 && pieces.canAttackPiece(nextGuess)) {\n            guessDirection = \"Up\";\n          } else {\n            nextGuess = prevHit - 10;\n            guessDirection = \"Down\";\n          }\n        } else {\n          let prevPrevHit = hits[hits.length - 2];\n          let diff = prevHit - prevPrevHit;\n\n          if (diff === 10) {\n            nextGuess = prevHit + 10;\n\n            if (prevHit < 90 && pieces.canAttackPiece(nextGuess)) {\n              guessDirection = \"Up\";\n            } else {\n              nextGuess = hits[0] - 10;\n              guessDirection = \"Down\";\n            }\n          } else if (diff === -10) {\n            nextGuess = prevHit - 10;\n\n            if (prevHit > 9 && pieces.canAttackPiece(nextGuess)) {\n              guessDirection = \"Down\";\n            } else {\n              nextGuess = hits[0] + 10;\n              guessDirection = \"Up\";\n            }\n          } else if (diff === 1) {\n            let prevRemainder = prevHit % 10;\n            nextGuess = prevHit + 1;\n\n            if (prevRemainder != 9 && pieces.canAttackPiece(nextGuess)) {\n              guessDirection = \"Right\";\n            } else {\n              nextGuess = hits[0] - 1;\n              guessDirection = \"Left\";\n            }\n          } else if (diff === -1) {\n            let prevRemainder = prevHit % 10;\n            nextGuess = prevHit - 1;\n\n            if (prevRemainder != 0 && pieces.canAttackPiece(nextGuess)) {\n              guessDirection = \"Left\";\n            } else {\n              nextGuess = hits[0] + 1;\n              guessDirection = \"Right\";\n            }\n          }\n        }\n      } else {\n        if (hits.length === 1) {\n          let firstHit = hits[0];\n          let firstRem = firstHit % 10;\n          let canGuessUp = !hits.includes(firstHit + 10) && firstHit < 90 && pieces.canAttackPiece(firstHit + 10);\n          let canGuessDown = !hits.includes(firstHit - 10) && firstHit > 9 && pieces.canAttackPiece(firstHit - 10);\n          let canGuessRight = !hits.includes(firstHit + 1) && firstRem < 9 && pieces.canAttackPiece(firstHit + 1);\n          let canGuessLeft = !hits.includes(firstHit - 1) && firstRem > 0 && pieces.canAttackPiece(firstHit - 1);\n\n          if (canGuessUp) {\n            nextGuess = firstHit + 10;\n            guessDirection = \"Up\";\n          } else if (canGuessDown) {\n            nextGuess = firstHit - 10;\n            guessDirection = \"Down\";\n          } else if (canGuessRight) {\n            nextGuess = firstHit + 1;\n            guessDirection = \"Right\";\n          } else if (canGuessLeft) {\n            nextGuess = firstHit - 1;\n            guessDirection = \"Left\";\n          }\n        } else {\n          let prevHit = hits[hits.length - 1];\n          let prevPrevHit = hits[hits.length - 2];\n          let firstHit = hits[0];\n          let prevGuess = guesses[guesses.length - 1];\n\n          if (prevHit != prevGuess) {\n            //switch directions\n            let vertical = hits.includes(firstHit + 10);\n            let horizontal = hits.includes(firstHit + 1);\n\n            if (vertical) {\n              nextGuess = firstHit - 10;\n              guessDirection = \"Down\";\n            } else {\n              nextGuess = firstHit - 1;\n              guessDirection = \"Left\";\n            }\n          } else {\n            if (hitDirection === \"Up\") {} else if (hitDirection === \"Down\") {\n              guessDirection = \"Down\";\n              nextGuess = prevHit - 10;\n            } else if (hitDirection === \"Right\") {\n              let rem = prevHit % 10;\n\n              if (rem < 9 && pieces.canAttackPiece(prevHit + 1)) {\n                guessDirection = \"Right\";\n                nextGuess = prevHit + 1;\n              } else {\n                guessDirection = \"Left\";\n                nextGuess = firstHit - 1;\n              }\n            } else if (hitDirection === \"Left\") {\n              guessDirection = \"Left\";\n              nextGuess = prevHit - 1;\n            }\n          }\n        }\n      }\n\n      guesses.push(nextGuess);\n\n      if (pieces.canHitPiece(nextGuess)) {\n        hits.push(nextGuess);\n        hitDirection = guessDirection;\n      }\n\n      let dex = pieces.attackPiece(nextGuess);\n      alert(this.getAlertText(dex, true));\n\n      if (dex === 2) {\n        hits = [];\n        guesses = [];\n        hitDirection = \"\";\n      }\n\n      firstPlayer[\"pieces\"] = pieces;\n      this.setState({\n        firstPlayer\n      });\n      ai[\"hits\"] = hits;\n      ai[\"guesses\"] = guesses;\n      ai[\"hitDirection\"] = hitDirection;\n      this.setState({\n        ai\n      });\n      setTimeout(this.startUserTurn(), 1000);\n    };\n\n    this.getAlertText = (dex, isOpponenet) => {\n      if (dex === 0) {\n        return isOpponenet ? \"Your opponent missed!\" : \"You missed you fool!\";\n      }\n\n      if (dex === 1) {\n        return isOpponenet ? \"Your ship has been hit!\" : \"You hit their ship!\";\n      }\n\n      if (dex === 2) {\n        return isOpponenet ? \"Your ship has been sunk!\" : \"You sank their ship!\";\n      }\n    };\n\n    this.startUserTurn = () => {\n      this.setState({\n        showingBoard1: false\n      });\n      this.setState({\n        firstPlayerTurn: true\n      });\n    };\n\n    this.resetGame = () => {\n      this.setState({\n        firstPlayerTurn: true\n      });\n      this.setState({\n        gameOver: false\n      });\n    };\n\n    this.chooseCharacter = (isFirst, character) => {\n      let _this$state5 = this.state,\n          firstPlayer = _this$state5.firstPlayer,\n          secondPlayer = _this$state5.secondPlayer;\n\n      if (isFirst) {\n        firstPlayer[\"character\"] = character;\n        this.setState({\n          firstPlayer\n        });\n      } else {\n        secondPlayer[\"character\"] = character;\n        this.setState({\n          secondPlayer\n        });\n      }\n    };\n\n    this.placePiece = id => {\n      let firstPlayer = this.state.firstPlayer;\n      let pieces = firstPlayer.pieces;\n      let size = pieces.gamePieces[firstPlayer.currentPiece].size;\n      let spaces = [];\n\n      for (let i = 0; i < size; i++) {\n        let dex = id + 10 * i;\n\n        if (dex > 99) {\n          return;\n        }\n\n        spaces.push(dex);\n      }\n\n      if (pieces.canPlaceGamepiece(spaces)) {\n        pieces.addPiece(spaces, firstPlayer.currentPiece);\n        firstPlayer[\"pieces\"] = pieces;\n        this.setState({\n          hoverSquares: Array(100).fill(0)\n        });\n        this.setState({\n          firstPlayer\n        });\n        this.setState({\n          placingPiece: true\n        });\n      }\n    };\n\n    this.hoverOver = id => {\n      let _this$state6 = this.state,\n          firstPlayer = _this$state6.firstPlayer,\n          hoverSquares = _this$state6.hoverSquares;\n      let pieces = firstPlayer.pieces;\n      let size = pieces.gamePieces[firstPlayer.currentPiece].size;\n      let spaces = [];\n\n      for (let i = 0; i < size; i++) {\n        let dex = id + 10 * i;\n\n        if (dex > 99) {\n          return;\n        }\n\n        spaces.push(dex);\n      }\n\n      if (pieces.canPlaceGamepiece(spaces)) {\n        let h = hoverSquares;\n        h = Array(100).fill(0);\n\n        for (let i = 0; i < spaces.length; i++) {\n          h[spaces[i]] = 1;\n        }\n\n        this.setState({\n          hoverSquares: h\n        });\n      }\n    };\n\n    this.rotatePiece = () => {\n      let firstPlayer = this.state.firstPlayer;\n      let pieces = firstPlayer.pieces;\n      pieces.rotatePiece(firstPlayer.currentPiece);\n      firstPlayer[\"pieces\"] = pieces;\n      this.setState({\n        firstPlayer\n      });\n    };\n\n    this.confirmPlace = () => {\n      let firstPlayer = this.state.firstPlayer;\n      let pieces = firstPlayer.pieces;\n      pieces.setOriginalSquares();\n      firstPlayer[\"currentPiece\"] = firstPlayer.currentPiece + 1;\n      this.setState({\n        firstPlayer\n      });\n      this.setState({\n        placingPiece: false\n      });\n\n      if (firstPlayer.currentPiece >= pieces.gamePieces.length) {\n        this.createAIBoard();\n      }\n    };\n\n    this.createAIBoard = () => {\n      for (let i = 0; i < 5; i++) {\n        this.createAIPiece(i);\n      }\n\n      this.setState({\n        gameStarted: true\n      });\n      this.setState({\n        showingBoard1: false\n      });\n    };\n\n    this.createAIPiece = dex => {\n      let secondPlayer = this.state.secondPlayer;\n      let pieces = secondPlayer.pieces;\n      let size = pieces.gamePieces[dex].size;\n      let spaces = [];\n      let canPlace = true;\n      let id = Math.floor(Math.random() * 100);\n\n      for (let i = 0; i < size; i++) {\n        let dex = id + 10 * i;\n\n        if (dex > 99) {\n          canPlace = false;\n        }\n\n        spaces.push(dex);\n      }\n\n      if (!canPlace) {\n        this.createAIPiece(dex);\n      } else {\n        if (pieces.canPlaceGamepiece(spaces)) {\n          pieces.addPiece(spaces, dex);\n          let numRot = Math.floor(Math.random() * 3);\n\n          for (let i = 0; i < numRot; i++) {\n            pieces.rotatePiece(dex);\n          }\n\n          secondPlayer[\"pieces\"] = pieces;\n          this.setState({\n            secondPlayer\n          });\n        } else {\n          this.createAIPiece(dex);\n        }\n      }\n    };\n\n    this.playMusic = () => {\n      const musicPlaying = this.state.musicPlaying;\n      let isPlaying = musicPlaying;\n      isPlaying = !isPlaying;\n\n      if (isPlaying) {\n        audio.play();\n      } else {\n        audio.pause();\n      }\n\n      this.setState({\n        musicPlaying: isPlaying\n      });\n    };\n\n    this.changeBoard = () => {\n      let nuShowBoard = !this.state.showingBoard1;\n      this.setState({\n        showingBoard1: nuShowBoard\n      });\n    };\n\n    this.state = {\n      firstPlayer: {\n        pieces: playerPieces[0],\n        won: false,\n        character: characters[0],\n        wins: 0,\n        currentPiece: 0\n      },\n      secondPlayer: {\n        pieces: playerPieces[1],\n        won: false,\n        character: characters[1],\n        wins: 0\n      },\n      ai: {\n        guesses: [],\n        hits: [],\n        hitDirection: \"\"\n      },\n      hoverSquares: Array(100).fill(0),\n      showingBoard1: true,\n      placingPiece: false,\n      musicPlaying: false,\n      firstPlayerTurn: true,\n      gameOver: false,\n      gameStarted: false\n    };\n  }\n\n  componentDidMount() {\n    audio.play();\n    this.setState({\n      musicPlaying: true\n    });\n  }\n\n  render() {\n    let _this$state7 = this.state,\n        firstPlayer = _this$state7.firstPlayer,\n        secondPlayer = _this$state7.secondPlayer,\n        gameOver = _this$state7.gameOver,\n        musicPlaying = _this$state7.musicPlaying,\n        showingBoard1 = _this$state7.showingBoard1,\n        placingPiece = _this$state7.placingPiece,\n        gameStarted = _this$state7.gameStarted,\n        hoverSquares = _this$state7.hoverSquares;\n    let grid = fillArray.map((square, i) => {\n      return React.createElement(Square, {\n        key: i.toString(),\n        id: i,\n        firstPlayer: firstPlayer.character,\n        secondPlayer: secondPlayer.character,\n        firstVal: firstPlayer.pieces.squares[i],\n        secondVal: secondPlayer.pieces.squares[i],\n        hoverVal: hoverSquares[i],\n        showingBoard1: showingBoard1,\n        gameStarted: gameStarted,\n        placingPiece: placingPiece,\n        hoverOver: this.hoverOver,\n        handleClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 495\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      className: \"backgroundStuff\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"glow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499\n      },\n      __self: this\n    }, firstPlayer.won ? firstPlayer.character + \" Won\" : secondPlayer.won ? secondPlayer.character + \" Won\" : gameOver ? \"It's a Tie\" : \"BattleThrones\"), React.createElement(Dropdown, {\n      isFirst: true,\n      chooseCharacter: this.chooseCharacter,\n      currentCharacter: firstPlayer.character,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500\n      },\n      __self: this\n    }), React.createElement(Dropdown, {\n      isFirst: false,\n      chooseCharacter: this.chooseCharacter,\n      currentCharacter: secondPlayer.character,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.resetGame,\n      className: \"resetButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502\n      },\n      __self: this\n    }, \"Reset\"), React.createElement(\"button\", {\n      onClick: this.playMusic,\n      className: \"resetButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503\n      },\n      __self: this\n    }, musicPlaying ? \"Stop Music\" : \"Play Music\"), placingPiece ? React.createElement(\"button\", {\n      onClick: this.rotatePiece,\n      className: \"resetButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }, \"Rotate\") : null, placingPiece ? React.createElement(\"button\", {\n      onClick: this.confirmPlace,\n      className: \"resetButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, \"Confirm\") : null, gameStarted ? React.createElement(\"button\", {\n      onClick: this.changeBoard,\n      className: \"resetButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    }, showingBoard1 ? \"Show Opponent's Board\" : \"Show Your Board\") : null, React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }, grid), React.createElement(\"div\", {\n      className: \"characterGrid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"playerOne\",\n      src: this.getPicture(firstPlayer.character),\n      alt: blank,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"playerTwo\",\n      src: this.getPicture(secondPlayer.character),\n      alt: blank,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"nameGrid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }, firstPlayer.character), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }, secondPlayer.character)), React.createElement(\"div\", {\n      className: \"playerGrid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }, \"Player One\"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    }, \"Player Two\")), React.createElement(\"div\", {\n      className: \"winsGrid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }, firstPlayer.wins), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524\n      },\n      __self: this\n    }, secondPlayer.wins)));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/ryzm/Desktop/Battleship/src/Board.js"],"names":["React","Component","Square","winningConditions","playerPieces","characters","Dropdown","blank","arya","bran","brienne","cersei","daenerys","davos","euron","greyWorm","hound","jamie","jonSnow","jorah","melisandre","missandei","nightKing","samwell","sansa","theon","tyrion","varys","theme","audio","Audio","fillArray","Array","fill","Board","constructor","props","getPicture","character","checkIfWinner","state","firstPlayer","secondPlayer","pieces","hasLost","secondWins","setState","gameOver","handleClick","id","gameStarted","placingPiece","firstPlayerTurn","showingBoard1","placePiece","attackSquare","canAttackPiece","dex","attackPiece","alert","getAlertText","setTimeout","startAITurn","aiTurn","getRandomGuess","squares","Math","floor","random","ai","hits","guesses","hitDirection","nextGuess","guessDirection","length","prevHit","prevPrevHit","diff","prevRemainder","firstHit","firstRem","canGuessUp","includes","canGuessDown","canGuessRight","canGuessLeft","prevGuess","vertical","horizontal","rem","push","canHitPiece","startUserTurn","isOpponenet","resetGame","chooseCharacter","isFirst","size","gamePieces","currentPiece","spaces","i","canPlaceGamepiece","addPiece","hoverSquares","hoverOver","h","rotatePiece","confirmPlace","setOriginalSquares","createAIBoard","createAIPiece","canPlace","numRot","playMusic","musicPlaying","isPlaying","play","pause","changeBoard","nuShowBoard","won","wins","componentDidMount","render","grid","map","square","toString"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Square from \"./Square.js\";\nimport winningConditions from './winningConditions.js';\nimport playerPieces from './playerPieces.js';\nimport characters from \"./characters.js\";\nimport './App.css';\nimport Dropdown from './Dropdown.js';\nimport blank from \"./blank.png\";\nimport arya from \"./faces/arya.png\";\nimport bran from \"./faces/bran.png\";\nimport brienne from \"./faces/brienne.png\";\nimport cersei from \"./faces/cersei.png\";\nimport daenerys from \"./faces/daenerys.png\";\nimport davos from \"./faces/davos.png\";\nimport euron from \"./faces/euron.png\";\nimport greyWorm from \"./faces/greyWorm.png\";\nimport hound from \"./faces/hound.png\";\nimport jamie from \"./faces/jamie.png\";\nimport jonSnow from \"./faces/jonSnow.png\";\nimport jorah from \"./faces/jorah.png\";\nimport melisandre from \"./faces/melisandre.png\";\nimport missandei from \"./faces/missandei.png\";\nimport nightKing from \"./faces/nightKing.png\";\nimport samwell from \"./faces/samwell.png\";\nimport sansa from \"./faces/sansa.png\";\nimport theon from \"./faces/theon.png\";\nimport tyrion from \"./faces/tyrion.png\";\nimport varys from \"./faces/varys.png\";\nimport theme from \"./theme.mp3\";\nconst audio  = new Audio(theme);\nconst fillArray = Array(100).fill(null);\n\nclass Board extends Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      firstPlayer : {\n        pieces: playerPieces[0],\n        won : false,\n        character: characters[0],\n        wins: 0,\n        currentPiece: 0\n      },\n      secondPlayer : {\n        pieces: playerPieces[1],\n        won : false,\n        character: characters[1],\n        wins: 0\n      },\n      ai: {\n        guesses: [],\n        hits: [],\n        hitDirection: \"\"\n      },\n      hoverSquares: Array(100).fill(0),\n      showingBoard1: true,\n      placingPiece: false,\n      musicPlaying: false,\n      firstPlayerTurn : true,\n      gameOver: false,\n      gameStarted: false\n    }\n  }\n\n  getPicture = (character) => {\n    switch(character){\n      case \"Arya Stark\":\n        return arya;\n      case \"Bran Stark\":\n        return bran;\n      case \"Brienne of Tarth\":\n        return brienne;\n      case \"Cersei Lannister\":\n        return cersei;\n      case \"Daenerys Targaryean\":\n        return daenerys;\n      case \"Davos Seaworth\":\n        return davos;\n      case \"Euron Greyjoy\":\n        return euron;\n      case \"Grey Worm\":\n        return greyWorm;\n      case \"The Hound\":\n        return hound;\n      case \"Jamie Lannister\":\n        return jamie;\n      case \"Jon Snow\":\n        return jonSnow;\n      case \"Jorah Mormont\":\n        return jorah;\n      case \"Melisandre\":\n        return melisandre;\n      case \"Missandei\":\n        return missandei;\n      case \"Night King\":\n        return nightKing;\n      case \"Samwell Tarly\":\n        return samwell;\n      case \"Sansa Stark\":\n        return sansa;\n      case \"Theon Greyjoy\":\n        return theon;\n      case \"Tyrion Lannister\":\n        return tyrion;\n      case \"Varys\":\n        return varys;\n    }\n    return jonSnow;\n  }\n\n  checkIfWinner = () =>{\n    let {firstPlayer, secondPlayer} = this.state;\n    if(firstPlayer.pieces.hasLost){\n      let secondWins = \n      this.setState({gameOver: true});\n    }\n  }\n\n  handleClick = (id) => {\n    let {gameStarted, placingPiece, firstPlayerTurn, gameOver, showingBoard1} = this.state;\n    if(gameOver){\n      return;\n    }\n    if(!gameStarted){\n      if(!placingPiece){\n        this.placePiece(id)\n      }\n    }\n    else {\n      if(firstPlayerTurn && !showingBoard1){\n        this.attackSquare(id);\n      }\n    }\n  }\n\n  attackSquare = (id) => {\n    let {firstPlayerTurn, secondPlayer} = this.state;\n    if(firstPlayerTurn){\n      let pieces = secondPlayer.pieces;\n      if(pieces.canAttackPiece(id)){\n        let dex = pieces.attackPiece(id);\n        alert(this.getAlertText(dex, false));\n        secondPlayer[\"pieces\"] = pieces;\n        this.setState({secondPlayer})\n        this.setState({firstPlayerTurn: false})\n        setTimeout(this.startAITurn(), 3000)\n      }\n    }\n  }\n\n  startAITurn = () => {\n    this.setState({showingBoard1: true})\n    this.aiTurn();\n  }\n\n  getRandomGuess = () => {\n    let {firstPlayer} = this.state;\n    let squares = firstPlayer.pieces.squares;\n    let id = Math.floor(Math.random() * 100);\n    if(squares[id] <= 1){\n      return id;\n    }\n    return this.getRandomGuess();\n  }\n\n  aiTurn = () => {\n    const {ai,firstPlayer} = this.state;\n    let pieces = firstPlayer.pieces;\n    let hits = ai.hits;\n    let guesses = ai.guesses;\n    let hitDirection = ai.hitDirection;\n    let nextGuess = 0;\n    let guessDirection = \"\";\n\n    if(hits.length === 0) {\n      nextGuess = this.getRandomGuess();\n    }\n    else if(hits.length === guesses.length) {\n      let prevHit = hits[hits.length - 1];\n      if(hits.length === 1){\n        nextGuess = prevHit + 10;\n        if(prevHit < 90 && pieces.canAttackPiece(nextGuess)){\n          guessDirection = \"Up\";\n        }\n        else {\n          nextGuess = prevHit - 10;\n          guessDirection = \"Down\";\n        }\n      }\n      else {\n        let prevPrevHit = hits[hits.length - 2];\n        let diff = prevHit - prevPrevHit;\n        if(diff === 10){\n          nextGuess = prevHit + 10;\n          if(prevHit < 90 && pieces.canAttackPiece(nextGuess)){\n            guessDirection = \"Up\";\n          }\n          else{\n            nextGuess = hits[0] - 10;\n            guessDirection = \"Down\";\n          }\n        }\n        else if(diff === -10){\n          nextGuess = prevHit - 10;\n          if(prevHit > 9 && pieces.canAttackPiece(nextGuess)){\n            guessDirection = \"Down\";\n          }\n          else{\n            nextGuess = hits[0] + 10;\n            guessDirection = \"Up\";\n          }\n        }\n        else if(diff === 1){\n          let prevRemainder = prevHit % 10;\n          nextGuess = prevHit + 1;\n          if(prevRemainder != 9 && pieces.canAttackPiece(nextGuess)){\n            guessDirection = \"Right\";\n          }\n          else {\n            nextGuess = hits[0] - 1;\n            guessDirection = \"Left\";\n          }\n        }\n        else if(diff === -1){\n          let prevRemainder = prevHit % 10;\n          nextGuess = prevHit - 1;\n          if(prevRemainder != 0 && pieces.canAttackPiece(nextGuess)){\n            guessDirection = \"Left\";\n          }\n          else{\n            nextGuess = hits[0] + 1;\n            guessDirection = \"Right\";\n          }\n        }\n      }\n    }\n    else {\n      if(hits.length === 1){\n        let firstHit = hits[0];\n        let firstRem = firstHit % 10;\n        let canGuessUp = !hits.includes(firstHit + 10) && firstHit < 90 && pieces.canAttackPiece(firstHit + 10);\n        let canGuessDown = !hits.includes(firstHit - 10) && firstHit > 9 && pieces.canAttackPiece(firstHit - 10);\n        let canGuessRight = !hits.includes(firstHit + 1) && firstRem < 9 && pieces.canAttackPiece(firstHit + 1);\n        let canGuessLeft = !hits.includes(firstHit - 1) && firstRem > 0 && pieces.canAttackPiece(firstHit - 1);\n        if(canGuessUp){\n          nextGuess = firstHit + 10;\n          guessDirection = \"Up\";\n        }\n        else if(canGuessDown){\n          nextGuess = firstHit - 10;\n          guessDirection = \"Down\";\n        }\n        else if(canGuessRight){\n          nextGuess = firstHit + 1;\n          guessDirection = \"Right\";\n        }\n        else if(canGuessLeft){\n          nextGuess = firstHit - 1;\n          guessDirection = \"Left\";\n        }\n      }\n      else{\n        let prevHit = hits[hits.length - 1];\n        let prevPrevHit = hits[hits.length - 2];\n        let firstHit = hits[0];\n        let prevGuess = guesses[guesses.length - 1];\n        if(prevHit != prevGuess){\n          //switch directions\n          let vertical = hits.includes(firstHit + 10);\n          let horizontal = hits.includes(firstHit + 1);\n          if(vertical){\n            nextGuess = firstHit - 10;\n            guessDirection = \"Down\";\n          }\n          else{\n            nextGuess = firstHit - 1;\n            guessDirection = \"Left\";\n          }\n        }\n        else{\n          if(hitDirection === \"Up\"){\n\n          }\n          else if(hitDirection === \"Down\"){\n            guessDirection = \"Down\";\n            nextGuess = prevHit - 10;\n          }\n          else if(hitDirection === \"Right\"){\n            let rem = prevHit % 10;\n            if(rem < 9 && pieces.canAttackPiece(prevHit + 1)){\n              guessDirection = \"Right\";\n              nextGuess = prevHit + 1;\n            }\n            else{\n              guessDirection = \"Left\";\n              nextGuess = firstHit - 1;\n            }\n          }\n          else if(hitDirection === \"Left\"){\n            guessDirection = \"Left\";\n            nextGuess = prevHit - 1;\n          }\n        }\n      }\n    }\n    guesses.push(nextGuess);\n\n    if(pieces.canHitPiece(nextGuess)){\n      hits.push(nextGuess);\n      hitDirection = guessDirection;\n    }\n    let dex = pieces.attackPiece(nextGuess)\n    alert(this.getAlertText(dex, true));\n    if(dex === 2){\n      hits = [];\n      guesses = [];\n      hitDirection = \"\";\n    }\n    firstPlayer[\"pieces\"] = pieces;\n    this.setState({firstPlayer})\n\n    ai[\"hits\"] = hits;\n    ai[\"guesses\"] = guesses;\n    ai[\"hitDirection\"] = hitDirection;\n    this.setState({ai});\n    setTimeout(this.startUserTurn(), 1000)\n  }\n\n  getAlertText = (dex, isOpponenet) => {\n    if(dex === 0){\n      return isOpponenet ? \"Your opponent missed!\" : \"You missed you fool!\";\n    }\n    if(dex === 1){\n      return isOpponenet ? \"Your ship has been hit!\" : \"You hit their ship!\";\n    }\n    if(dex === 2){\n      return isOpponenet ? \"Your ship has been sunk!\" : \"You sank their ship!\";\n    }\n  }\n\n  startUserTurn = () => {\n    this.setState({showingBoard1: false})\n    this.setState({firstPlayerTurn: true})\n  }\n\n  resetGame = () => {\n    this.setState({firstPlayerTurn : true});\n    this.setState({gameOver : false});\n  }\n\n  chooseCharacter = (isFirst, character) =>{\n    let {firstPlayer,secondPlayer} = this.state\n    if(isFirst){\n      firstPlayer[\"character\"] = character;\n      this.setState({firstPlayer});\n    }\n    else{\n      secondPlayer[\"character\"] = character;\n      this.setState({secondPlayer});\n    }\n  }\n\n  placePiece = (id) => {\n    let {firstPlayer} = this.state;\n    let pieces = firstPlayer.pieces;\n    let size = pieces.gamePieces[firstPlayer.currentPiece].size;\n    let spaces = [];\n    for(let i = 0; i < size; i++){\n      let dex = id + 10 * i\n      if(dex > 99){\n        return;\n      }\n      spaces.push(dex)\n    }\n    if(pieces.canPlaceGamepiece(spaces)){\n      pieces.addPiece(spaces, firstPlayer.currentPiece)\n      firstPlayer[\"pieces\"] = pieces;\n      this.setState({hoverSquares: Array(100).fill(0)})\n      this.setState({firstPlayer})\n      this.setState({placingPiece: true})\n    }\n  }\n\n  hoverOver = (id) => {\n    let {firstPlayer, hoverSquares} = this.state;\n    let pieces = firstPlayer.pieces;\n    let size = pieces.gamePieces[firstPlayer.currentPiece].size;\n    let spaces = [];\n    for(let i = 0; i < size; i++){\n      let dex = id + 10 * i\n      if(dex > 99){\n        return;\n      }\n      spaces.push(dex)\n    }\n    if(pieces.canPlaceGamepiece(spaces)){\n      let h = hoverSquares;\n      h = Array(100).fill(0);\n      for(let i = 0; i < spaces.length; i++){\n        h[spaces[i]] = 1;\n      }\n      this.setState({hoverSquares: h});\n    }\n  }\n\n  rotatePiece = () =>{\n    let {firstPlayer} = this.state;\n    let pieces = firstPlayer.pieces;\n    pieces.rotatePiece(firstPlayer.currentPiece);\n    firstPlayer[\"pieces\"] = pieces;\n    this.setState({firstPlayer});\n  }\n\n  confirmPlace = () => {\n    let {firstPlayer} = this.state;\n    let pieces = firstPlayer.pieces;\n    pieces.setOriginalSquares();\n    firstPlayer[\"currentPiece\"] = firstPlayer.currentPiece + 1;\n    this.setState({firstPlayer});\n    this.setState({placingPiece: false});\n    if(firstPlayer.currentPiece >= pieces.gamePieces.length){\n      this.createAIBoard();\n    }\n  }\n\n  createAIBoard = () => {\n    for(let i = 0; i < 5; i++){\n      this.createAIPiece(i);\n    }\n    this.setState({gameStarted: true})\n    this.setState({showingBoard1: false})\n  }\n\n  createAIPiece = (dex) => {\n    let {secondPlayer} = this.state;\n    let pieces = secondPlayer.pieces;\n    let size = pieces.gamePieces[dex].size;\n    let spaces = [];\n    let canPlace = true;\n    let id = Math.floor(Math.random() * 100)\n    for(let i = 0; i < size; i++){\n      let dex = id + 10 * i\n      if(dex > 99){\n        canPlace = false;\n      }\n      spaces.push(dex)\n    }\n    if(!canPlace){\n      this.createAIPiece(dex);\n    }\n    else {\n      if(pieces.canPlaceGamepiece(spaces)){\n        pieces.addPiece(spaces, dex)\n        let numRot = Math.floor(Math.random() * 3)\n        for(let i = 0; i < numRot; i++){\n          pieces.rotatePiece(dex);\n        }\n        secondPlayer[\"pieces\"] = pieces;\n        this.setState({secondPlayer})\n      }\n      else{\n        this.createAIPiece(dex);\n      }\n    }\n  }\n\n  componentDidMount(){\n    audio.play();\n    this.setState({musicPlaying:true});\n  }\n\n  playMusic = () =>{\n    const{musicPlaying} = this.state;\n    let isPlaying = musicPlaying;\n    isPlaying = !isPlaying;\n    if(isPlaying){\n      audio.play();\n    }\n    else{\n      audio.pause();\n    }\n    this.setState({musicPlaying:isPlaying});\n  }\n\n  changeBoard = () => {\n    let nuShowBoard = !this.state.showingBoard1;\n    this.setState({showingBoard1: nuShowBoard});\n  }\n\n  render(){\n    let {firstPlayer, secondPlayer, gameOver, musicPlaying, showingBoard1, placingPiece, gameStarted, hoverSquares} = this.state;\n    let grid = fillArray.map((square,i) =>{\n      return(\n        <Square key = {i.toString()} id = {i} firstPlayer = {firstPlayer.character} secondPlayer = {secondPlayer.character} firstVal = {firstPlayer.pieces.squares[i]} secondVal = {secondPlayer.pieces.squares[i]} hoverVal = {hoverSquares[i]} showingBoard1 = {showingBoard1} gameStarted = {gameStarted} placingPiece = {placingPiece} hoverOver = {this.hoverOver} handleClick = {this.handleClick}  />)\n    })\n    return (\n      <div className = \"backgroundStuff\">\n        <h1 className = \"glow\">{firstPlayer.won ? firstPlayer.character + \" Won\" : secondPlayer.won ? secondPlayer.character + \" Won\" : gameOver ? \"It's a Tie\" : \"BattleThrones\"}</h1>\n        <Dropdown isFirst = {true} chooseCharacter = {this.chooseCharacter} currentCharacter = {firstPlayer.character}/>\n        <Dropdown isFirst = {false} chooseCharacter = {this.chooseCharacter} currentCharacter = {secondPlayer.character}/>\n        <button onClick = {this.resetGame} className = \"resetButton\">Reset</button>\n        <button onClick = {this.playMusic} className = \"resetButton\">{musicPlaying ? \"Stop Music\": \"Play Music\"}</button>\n        {placingPiece ? (<button onClick = {this.rotatePiece} className = \"resetButton\">Rotate</button>): (null)}\n        {placingPiece ? (<button onClick = {this.confirmPlace} className = \"resetButton\">Confirm</button>): (null)}\n        {gameStarted ? (<button onClick = {this.changeBoard} className = \"resetButton\">{showingBoard1 ? \"Show Opponent's Board\" : \"Show Your Board\"}</button>): (null)}\n        <div className = \"grid\">\n          {grid}\n        </div>\n        <div className = \"characterGrid\">\n          <img className = \"playerOne\" src =  {this.getPicture(firstPlayer.character)} alt = {blank}></img>\n          <img className = \"playerTwo\" src =  {this.getPicture(secondPlayer.character)} alt = {blank}></img>\n        </div>\n        <div className = \"nameGrid\">\n          <h1>{firstPlayer.character}</h1>\n          <h1>{secondPlayer.character}</h1>\n        </div>\n        <div className = \"playerGrid\">\n          <h1>Player One</h1>\n          <h1>Player Two</h1>\n        </div>\n        <div className = \"winsGrid\">\n          <h1>{firstPlayer.wins}</h1>\n          <h1>{secondPlayer.wins}</h1>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}