{"ast":null,"code":"class Piece {\n  constructor(size) {\n    this.size = size;\n    this.positions = [];\n    this.hits = [];\n    this.alive = true;\n    this.rotation = 0;\n  }\n\n  attackPiece(dex) {}\n\n  rotatePiece(spaces) {\n    let rot = this.rotation;\n    let finPos = [];\n    let anchorPoint = rot === 0 || rot === 270 ? Math.min(...this.positions) : Math.max(...this.positions);\n    let anchorRemainder = anchorPoint > 9 ? anchorPoint - anchorPoint % 10 : 0;\n    let nuRot = false;\n\n    for (let i = 0; i < 4; i++) {\n      rot += 90;\n      rot = rot < 360 ? rot : 0;\n      let canRotate = true;\n      finPos = [anchorPoint];\n\n      for (let j = 1; j < this.size; j++) {\n        if (rot === 0) {\n          let dex = anchorPoint + 10 * j;\n          finPos[j] = dex;\n\n          if (dex > 99) {\n            canRotate = false;\n            break;\n          }\n        } else if (rot === 90) {\n          let dex = anchorPoint - j;\n          let rem = dex > 9 ? dex - dex % 10 : 0;\n          finPos[j] = dex;\n\n          if (dex < 0 || rem != anchorRemainder) {\n            canRotate = false;\n            break;\n          }\n        } else if (rot === 180) {\n          let dex = anchorPoint - 10 * j;\n          finPos[j] = dex;\n\n          if (dex < 0) {\n            canRotate = false;\n            break;\n          }\n        } else if (rot === 270) {\n          let dex = anchorPoint + j;\n          let rem = dex > 9 ? dex - dex % 10 : 0;\n          finPos[j] = dex;\n\n          if (dex > 99 || rem != anchorRemainder) {\n            canRotate = false;\n            break;\n          }\n        }\n      }\n\n      if (canRotate) {\n        nuRot = true;\n\n        for (let k = 0; k < finPos.length; k++) {\n          if (spaces.includes(finPos[k])) {\n            nuRot = false;\n            break;\n          }\n        }\n\n        if (nuRot) {\n          break;\n        }\n      }\n    }\n\n    if (nuRot) {\n      this.positions = finPos;\n      this.rotation = rot;\n    }\n  }\n\n}\n\nclass PlayerPieces {\n  constructor() {\n    this.gamePieces = [new Piece(2), new Piece(3), new Piece(3), new Piece(4), new Piece(5)];\n    this.squares = Array(100).fill(0);\n    this.originalSquares = Array(100).fill(0);\n  }\n\n  setOriginalSquares() {\n    this.originalSquares = this.squares;\n  }\n\n  canPlaceGamepiece(arr) {\n    let canPlace = true;\n\n    for (let i = 0; i < arr.length; i++) {\n      if (this.squares[arr[i]] === 1) {\n        canPlace = false;\n        break;\n      }\n    }\n\n    return canPlace;\n  }\n\n  addPiece(spaces, dex) {\n    for (let i = 0; i < spaces.length; i++) {\n      this.squares[spaces[i]] = 1;\n    }\n\n    this.gamePieces[dex].positions = spaces;\n  }\n\n  canAttackPiece(dex) {\n    if (this.squares[dex] > 1) {\n      return false;\n    }\n\n    return true;\n  }\n\n  hasSunkPiece(dex) {\n    if (this.squares[dex] === 1) {\n      for (let i = 0; i < this.gamePieces.length; i++) {\n        if (this.gamePieces[i].positions.includes) {}\n      }\n    }\n\n    this.squares[dex] += 2;\n    return this.squares[dex] === 3;\n  }\n\n  rotatePiece(dex) {\n    let initSpaces = this.gamePieces[dex].positions;\n    let occupiedSpaces = [];\n\n    for (let i = 0; i < this.gamePieces.length; i++) {\n      if (i != dex) {\n        for (let j = 0; j < this.gamePieces[i].positions.length; j++) {\n          occupiedSpaces.push(this.gamePieces[i].positions[j]);\n        }\n      }\n    }\n\n    this.gamePieces[dex].rotatePiece(occupiedSpaces);\n    let nuSpaces = this.gamePieces[dex].positions;\n\n    for (let i = 0; i < initSpaces.length; i++) {\n      this.squares[initSpaces[i]] = 0;\n      this.squares[nuSpaces[i]] = 1;\n    }\n  }\n\n}\n\nlet user = new PlayerPieces();\nlet opponent = new PlayerPieces();\nexport default [user, opponent];","map":{"version":3,"sources":["/Users/ryzm/Desktop/Battleship/src/playerPieces.js"],"names":["Piece","constructor","size","positions","hits","alive","rotation","attackPiece","dex","rotatePiece","spaces","rot","finPos","anchorPoint","Math","min","max","anchorRemainder","nuRot","i","canRotate","j","rem","k","length","includes","PlayerPieces","gamePieces","squares","Array","fill","originalSquares","setOriginalSquares","canPlaceGamepiece","arr","canPlace","addPiece","canAttackPiece","hasSunkPiece","initSpaces","occupiedSpaces","push","nuSpaces","user","opponent"],"mappings":"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","sourcesContent":["class Piece{\n  constructor(size){\n    this.size = size;\n    this.positions = [];\n    this.hits = [];\n    this.alive = true;\n    this.rotation = 0;\n  }\n\n  attackPiece(dex){\n\n  }\n\n  rotatePiece(spaces){\n    let rot = this.rotation;\n    let finPos = [];\n    let anchorPoint = rot === 0 || rot === 270 ? Math.min(...this.positions) : Math.max(...this.positions);\n    let anchorRemainder = anchorPoint > 9 ? anchorPoint - anchorPoint % 10 : 0;\n    let nuRot = false;\n\n    for(let i = 0; i < 4; i++){\n      rot += 90;\n      rot = rot < 360 ? rot : 0;\n      let canRotate = true;\n      finPos = [anchorPoint];\n      for(let j = 1; j < this.size; j++){\n        if(rot === 0){\n          let dex = anchorPoint + 10 * j\n          finPos[j] = dex\n          if(dex > 99){\n            canRotate = false;\n            break;\n          }\n        }\n        else if(rot === 90){\n          let dex = anchorPoint - j\n          let rem = dex > 9 ? dex - dex % 10 : 0;\n          finPos[j] = dex\n          if(dex < 0 || rem != anchorRemainder){\n            canRotate = false;\n            break;\n          }\n        }\n        else if(rot === 180){\n          let dex = anchorPoint - 10 * j\n          finPos[j] = dex\n          if(dex < 0){\n            canRotate = false;\n            break;\n          }\n        }\n        else if(rot === 270){\n          let dex = anchorPoint + j\n          let rem = dex > 9 ? dex - dex % 10 : 0;\n          finPos[j] = dex\n          if(dex > 99 || rem != anchorRemainder){\n            canRotate = false;\n            break;\n          }\n        }\n      }\n      if(canRotate){\n        nuRot = true;\n        for(let k = 0; k < finPos.length; k++){\n          if(spaces.includes(finPos[k])){\n            nuRot = false;\n            break;\n          }\n        }\n        if(nuRot){\n          break;\n        }\n      }\n    }\n    if(nuRot){\n      this.positions = finPos;\n      this.rotation = rot;\n    }\n  }\n}\n\nclass PlayerPieces{\n  constructor(){\n    this.gamePieces = [new Piece(2), new Piece(3), new Piece(3), new Piece(4), new Piece(5)];\n    this.squares = Array(100).fill(0);\n    this.originalSquares = Array(100).fill(0);\n  }\n\n  setOriginalSquares(){\n    this.originalSquares = this.squares;\n  }\n\n  canPlaceGamepiece(arr){\n    let canPlace = true;\n    for(let i = 0; i < arr.length; i++){\n      if(this.squares[arr[i]] === 1){\n        canPlace = false;\n        break;\n      }\n    }\n    return canPlace;\n  }\n\n  addPiece(spaces, dex){\n    for(let i = 0; i < spaces.length; i++){\n      this.squares[spaces[i]] = 1;\n    }\n    this.gamePieces[dex].positions = spaces\n  }\n\n  canAttackPiece(dex){\n    if(this.squares[dex] > 1){\n      return false;\n    }\n    return true;\n  }\n\n  hasSunkPiece(dex){\n    if(this.squares[dex] === 1){\n      for(let i = 0; i < this.gamePieces.length; i++){\n        if(this.gamePieces[i].positions.includes){\n\n        }\n      }\n    }\n    this.squares[dex]+=2;\n    return this.squares[dex] === 3;\n  }\n\n  rotatePiece(dex){\n    let initSpaces = this.gamePieces[dex].positions;\n    let occupiedSpaces = [];\n    for(let i = 0; i < this.gamePieces.length; i++){\n      if(i != dex){\n        for(let j = 0; j < this.gamePieces[i].positions.length; j++){\n          occupiedSpaces.push(this.gamePieces[i].positions[j]);\n        }\n      }\n    }\n    this.gamePieces[dex].rotatePiece(occupiedSpaces);\n    let nuSpaces = this.gamePieces[dex].positions;\n    for(let i = 0; i < initSpaces.length; i++){\n      this.squares[initSpaces[i]] = 0;\n      this.squares[nuSpaces[i]] = 1;\n    }\n  }\n}\n\nlet user = new PlayerPieces()\nlet opponent = new PlayerPieces()\n\nexport default [user,opponent];\n"]},"metadata":{},"sourceType":"module"}